// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbshape.proto

#include "pbshape.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brush_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Ellipse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Eraser_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pen_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Rectangle_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapEllipseEntry_DoNotUse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapLineEntry_DoNotUse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapRectangleEntry_DoNotUse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapScribbleEntry_DoNotUse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapTriangleEntry_DoNotUse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Scribble_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scribble_MaperaserEntry_DoNotUse_pbshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Triangle_pbshape_2eproto;
namespace PBShape {
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class PenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pen> _instance;
} _Pen_default_instance_;
class BrushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brush> _instance;
} _Brush_default_instance_;
class PosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pos> _instance;
} _Pos_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Line> _instance;
} _Line_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rectangle> _instance;
} _Rectangle_default_instance_;
class EllipseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ellipse> _instance;
} _Ellipse_default_instance_;
class TriangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Triangle> _instance;
} _Triangle_default_instance_;
class EraserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Eraser> _instance;
} _Eraser_default_instance_;
class Scribble_MaperaserEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scribble_MaperaserEntry_DoNotUse> _instance;
} _Scribble_MaperaserEntry_DoNotUse_default_instance_;
class ScribbleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scribble> _instance;
} _Scribble_default_instance_;
class Scene_MapLineEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_MapLineEntry_DoNotUse> _instance;
} _Scene_MapLineEntry_DoNotUse_default_instance_;
class Scene_MapRectangleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_MapRectangleEntry_DoNotUse> _instance;
} _Scene_MapRectangleEntry_DoNotUse_default_instance_;
class Scene_MapEllipseEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_MapEllipseEntry_DoNotUse> _instance;
} _Scene_MapEllipseEntry_DoNotUse_default_instance_;
class Scene_MapTriangleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_MapTriangleEntry_DoNotUse> _instance;
} _Scene_MapTriangleEntry_DoNotUse_default_instance_;
class Scene_MapScribbleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_MapScribbleEntry_DoNotUse> _instance;
} _Scene_MapScribbleEntry_DoNotUse_default_instance_;
class SceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene> _instance;
} _Scene_default_instance_;
}  // namespace PBShape
static void InitDefaultsscc_info_Brush_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Brush_default_instance_;
    new (ptr) ::PBShape::Brush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Brush::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brush_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brush_pbshape_2eproto}, {}};

static void InitDefaultsscc_info_Ellipse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Ellipse_default_instance_;
    new (ptr) ::PBShape::Ellipse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Ellipse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Ellipse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Ellipse_pbshape_2eproto}, {
      &scc_info_Pos_pbshape_2eproto.base,
      &scc_info_Pen_pbshape_2eproto.base,
      &scc_info_Brush_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Eraser_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Eraser_default_instance_;
    new (ptr) ::PBShape::Eraser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Eraser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Eraser_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Eraser_pbshape_2eproto}, {}};

static void InitDefaultsscc_info_Line_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Line_default_instance_;
    new (ptr) ::PBShape::Line();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Line::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Line_pbshape_2eproto}, {
      &scc_info_Pos_pbshape_2eproto.base,
      &scc_info_Pen_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Pen_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Pen_default_instance_;
    new (ptr) ::PBShape::Pen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Pen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pen_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pen_pbshape_2eproto}, {}};

static void InitDefaultsscc_info_Pos_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Pos_default_instance_;
    new (ptr) ::PBShape::Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pos_pbshape_2eproto}, {}};

static void InitDefaultsscc_info_Rect_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Rect_default_instance_;
    new (ptr) ::PBShape::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rect_pbshape_2eproto}, {}};

static void InitDefaultsscc_info_Rectangle_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Rectangle_default_instance_;
    new (ptr) ::PBShape::Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Rectangle_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Rectangle_pbshape_2eproto}, {
      &scc_info_Pos_pbshape_2eproto.base,
      &scc_info_Pen_pbshape_2eproto.base,
      &scc_info_Brush_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scene_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scene_default_instance_;
    new (ptr) ::PBShape::Scene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Scene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Scene_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Scene_pbshape_2eproto}, {
      &scc_info_Scene_MapLineEntry_DoNotUse_pbshape_2eproto.base,
      &scc_info_Scene_MapRectangleEntry_DoNotUse_pbshape_2eproto.base,
      &scc_info_Scene_MapEllipseEntry_DoNotUse_pbshape_2eproto.base,
      &scc_info_Scene_MapTriangleEntry_DoNotUse_pbshape_2eproto.base,
      &scc_info_Scene_MapScribbleEntry_DoNotUse_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scene_MapEllipseEntry_DoNotUse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scene_MapEllipseEntry_DoNotUse_default_instance_;
    new (ptr) ::PBShape::Scene_MapEllipseEntry_DoNotUse();
  }
  ::PBShape::Scene_MapEllipseEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapEllipseEntry_DoNotUse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_MapEllipseEntry_DoNotUse_pbshape_2eproto}, {
      &scc_info_Ellipse_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scene_MapLineEntry_DoNotUse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scene_MapLineEntry_DoNotUse_default_instance_;
    new (ptr) ::PBShape::Scene_MapLineEntry_DoNotUse();
  }
  ::PBShape::Scene_MapLineEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapLineEntry_DoNotUse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_MapLineEntry_DoNotUse_pbshape_2eproto}, {
      &scc_info_Line_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scene_MapRectangleEntry_DoNotUse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scene_MapRectangleEntry_DoNotUse_default_instance_;
    new (ptr) ::PBShape::Scene_MapRectangleEntry_DoNotUse();
  }
  ::PBShape::Scene_MapRectangleEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapRectangleEntry_DoNotUse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_MapRectangleEntry_DoNotUse_pbshape_2eproto}, {
      &scc_info_Rectangle_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scene_MapScribbleEntry_DoNotUse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scene_MapScribbleEntry_DoNotUse_default_instance_;
    new (ptr) ::PBShape::Scene_MapScribbleEntry_DoNotUse();
  }
  ::PBShape::Scene_MapScribbleEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapScribbleEntry_DoNotUse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_MapScribbleEntry_DoNotUse_pbshape_2eproto}, {
      &scc_info_Scribble_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scene_MapTriangleEntry_DoNotUse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scene_MapTriangleEntry_DoNotUse_default_instance_;
    new (ptr) ::PBShape::Scene_MapTriangleEntry_DoNotUse();
  }
  ::PBShape::Scene_MapTriangleEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_MapTriangleEntry_DoNotUse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_MapTriangleEntry_DoNotUse_pbshape_2eproto}, {
      &scc_info_Triangle_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scribble_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scribble_default_instance_;
    new (ptr) ::PBShape::Scribble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Scribble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Scribble_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Scribble_pbshape_2eproto}, {
      &scc_info_Rect_pbshape_2eproto.base,
      &scc_info_Pos_pbshape_2eproto.base,
      &scc_info_Pen_pbshape_2eproto.base,
      &scc_info_Scribble_MaperaserEntry_DoNotUse_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Scribble_MaperaserEntry_DoNotUse_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Scribble_MaperaserEntry_DoNotUse_default_instance_;
    new (ptr) ::PBShape::Scribble_MaperaserEntry_DoNotUse();
  }
  ::PBShape::Scribble_MaperaserEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scribble_MaperaserEntry_DoNotUse_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scribble_MaperaserEntry_DoNotUse_pbshape_2eproto}, {
      &scc_info_Eraser_pbshape_2eproto.base,}};

static void InitDefaultsscc_info_Triangle_pbshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PBShape::_Triangle_default_instance_;
    new (ptr) ::PBShape::Triangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBShape::Triangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Triangle_pbshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Triangle_pbshape_2eproto}, {
      &scc_info_Pos_pbshape_2eproto.base,
      &scc_info_Pen_pbshape_2eproto.base,
      &scc_info_Brush_pbshape_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pbshape_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pbshape_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pbshape_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pbshape_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PBShape::Rect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Rect, x_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rect, y_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rect, w_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rect, h_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, width_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, r_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, g_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, b_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, a_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, style_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, capstyle_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pen, joinstyle_),
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, r_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, g_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, b_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, a_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Brush, style_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::PBShape::Pos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Pos, x_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Pos, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, pos_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, p0_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, p1_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, pen_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Line, angle_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, pos_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, width_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, height_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, pen_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, brush_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Rectangle, angle_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, pos_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, width_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, height_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, pen_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, brush_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Ellipse, angle_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, pos_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, width_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, height_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, pen_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, brush_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Triangle, angle_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::PBShape::Eraser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Eraser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Eraser, path_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Eraser, width_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble_MaperaserEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble_MaperaserEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble_MaperaserEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble_MaperaserEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, rect_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, pos_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, path_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, pen_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, maperaser_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scribble, angle_),
  1,
  2,
  0,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapLineEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapLineEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapLineEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapLineEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapRectangleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapRectangleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapRectangleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapRectangleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapEllipseEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapEllipseEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapEllipseEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapEllipseEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapTriangleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapTriangleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapTriangleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapTriangleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapScribbleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapScribbleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapScribbleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene_MapScribbleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, mapline_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, maprectangle_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, mapellipse_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, maptriangle_),
  PROTOBUF_FIELD_OFFSET(::PBShape::Scene, mapscribble_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::PBShape::Rect)},
  { 13, 26, sizeof(::PBShape::Pen)},
  { 34, 44, sizeof(::PBShape::Brush)},
  { 49, 56, sizeof(::PBShape::Pos)},
  { 58, 68, sizeof(::PBShape::Line)},
  { 73, 84, sizeof(::PBShape::Rectangle)},
  { 90, 101, sizeof(::PBShape::Ellipse)},
  { 107, 118, sizeof(::PBShape::Triangle)},
  { 124, 131, sizeof(::PBShape::Eraser)},
  { 133, 140, sizeof(::PBShape::Scribble_MaperaserEntry_DoNotUse)},
  { 142, 153, sizeof(::PBShape::Scribble)},
  { 159, 166, sizeof(::PBShape::Scene_MapLineEntry_DoNotUse)},
  { 168, 175, sizeof(::PBShape::Scene_MapRectangleEntry_DoNotUse)},
  { 177, 184, sizeof(::PBShape::Scene_MapEllipseEntry_DoNotUse)},
  { 186, 193, sizeof(::PBShape::Scene_MapTriangleEntry_DoNotUse)},
  { 195, 202, sizeof(::PBShape::Scene_MapScribbleEntry_DoNotUse)},
  { 204, 214, sizeof(::PBShape::Scene)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Pen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Brush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Line_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Rectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Ellipse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Triangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Eraser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scribble_MaperaserEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scribble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scene_MapLineEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scene_MapRectangleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scene_MapEllipseEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scene_MapTriangleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scene_MapScribbleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PBShape::_Scene_default_instance_),
};

const char descriptor_table_protodef_pbshape_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpbshape.proto\022\007PBShape\"2\n\004Rect\022\t\n\001x\030\001 "
  "\002(\005\022\t\n\001y\030\002 \002(\005\022\t\n\001w\030\003 \002(\005\022\t\n\001h\030\004 \002(\005\"\217\001\n"
  "\003Pen\022\020\n\005width\030\001 \001(\005:\0011\022\014\n\001r\030\002 \001(\005:\0010\022\014\n\001"
  "g\030\003 \001(\005:\0010\022\014\n\001b\030\004 \001(\005:\0010\022\014\n\001a\030\005 \001(\005:\0010\022\020"
  "\n\005style\030\006 \001(\005:\0011\022\024\n\010capstyle\030\007 \001(\005:\00232\022\026"
  "\n\tjoinstyle\030\010 \001(\005:\003128\"S\n\005Brush\022\014\n\001r\030\001 \001"
  "(\005:\0010\022\014\n\001g\030\002 \001(\005:\0010\022\014\n\001b\030\003 \001(\005:\0010\022\016\n\001a\030\004"
  " \001(\005:\003255\022\020\n\005style\030\005 \001(\005:\0011\"\033\n\003Pos\022\t\n\001x\030"
  "\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\202\001\n\004Line\022\031\n\003pos\030\001 \002(\0132\014"
  ".PBShape.Pos\022\030\n\002p0\030\002 \002(\0132\014.PBShape.Pos\022\030"
  "\n\002p1\030\003 \002(\0132\014.PBShape.Pos\022\031\n\003pen\030\004 \002(\0132\014."
  "PBShape.Pen\022\020\n\005angle\030\005 \001(\002:\0010\"\221\001\n\tRectan"
  "gle\022\031\n\003pos\030\001 \002(\0132\014.PBShape.Pos\022\r\n\005width\030"
  "\002 \002(\005\022\016\n\006height\030\003 \002(\005\022\031\n\003pen\030\004 \001(\0132\014.PBS"
  "hape.Pen\022\035\n\005brush\030\005 \001(\0132\016.PBShape.Brush\022"
  "\020\n\005angle\030\006 \001(\002:\0010\"\217\001\n\007Ellipse\022\031\n\003pos\030\001 \002"
  "(\0132\014.PBShape.Pos\022\r\n\005width\030\002 \002(\005\022\016\n\006heigh"
  "t\030\003 \002(\005\022\031\n\003pen\030\004 \001(\0132\014.PBShape.Pen\022\035\n\005br"
  "ush\030\005 \001(\0132\016.PBShape.Brush\022\020\n\005angle\030\006 \001(\002"
  ":\0010\"\220\001\n\010Triangle\022\031\n\003pos\030\001 \002(\0132\014.PBShape."
  "Pos\022\r\n\005width\030\002 \002(\005\022\016\n\006height\030\003 \002(\005\022\031\n\003pe"
  "n\030\004 \001(\0132\014.PBShape.Pen\022\035\n\005brush\030\005 \001(\0132\016.P"
  "BShape.Brush\022\020\n\005angle\030\006 \001(\002:\0010\"%\n\006Eraser"
  "\022\014\n\004path\030\001 \002(\014\022\r\n\005width\030\002 \002(\005\"\365\001\n\010Scribb"
  "le\022\033\n\004rect\030\001 \002(\0132\r.PBShape.Rect\022\031\n\003pos\030\002"
  " \002(\0132\014.PBShape.Pos\022\014\n\004path\030\003 \002(\014\022\031\n\003pen\030"
  "\004 \002(\0132\014.PBShape.Pen\0223\n\tmaperaser\030\005 \003(\0132 "
  ".PBShape.Scribble.MaperaserEntry\022\020\n\005angl"
  "e\030\006 \001(\002:\0010\032A\n\016MaperaserEntry\022\013\n\003key\030\001 \001("
  "\005\022\036\n\005value\030\002 \001(\0132\017.PBShape.Eraser:\0028\001\"\350\004"
  "\n\005Scene\022,\n\007mapLine\030\001 \003(\0132\033.PBShape.Scene"
  ".MapLineEntry\0226\n\014mapRectangle\030\002 \003(\0132 .PB"
  "Shape.Scene.MapRectangleEntry\0222\n\nmapElli"
  "pse\030\003 \003(\0132\036.PBShape.Scene.MapEllipseEntr"
  "y\0224\n\013mapTriangle\030\004 \003(\0132\037.PBShape.Scene.M"
  "apTriangleEntry\0224\n\013mapScribble\030\005 \003(\0132\037.P"
  "BShape.Scene.MapScribbleEntry\032=\n\014MapLine"
  "Entry\022\013\n\003key\030\001 \001(\005\022\034\n\005value\030\002 \001(\0132\r.PBSh"
  "ape.Line:\0028\001\032G\n\021MapRectangleEntry\022\013\n\003key"
  "\030\001 \001(\005\022!\n\005value\030\002 \001(\0132\022.PBShape.Rectangl"
  "e:\0028\001\032C\n\017MapEllipseEntry\022\013\n\003key\030\001 \001(\005\022\037\n"
  "\005value\030\002 \001(\0132\020.PBShape.Ellipse:\0028\001\032E\n\020Ma"
  "pTriangleEntry\022\013\n\003key\030\001 \001(\005\022 \n\005value\030\002 \001"
  "(\0132\021.PBShape.Triangle:\0028\001\032E\n\020MapScribble"
  "Entry\022\013\n\003key\030\001 \001(\005\022 \n\005value\030\002 \001(\0132\021.PBSh"
  "ape.Scribble:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pbshape_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pbshape_2eproto_sccs[17] = {
  &scc_info_Brush_pbshape_2eproto.base,
  &scc_info_Ellipse_pbshape_2eproto.base,
  &scc_info_Eraser_pbshape_2eproto.base,
  &scc_info_Line_pbshape_2eproto.base,
  &scc_info_Pen_pbshape_2eproto.base,
  &scc_info_Pos_pbshape_2eproto.base,
  &scc_info_Rect_pbshape_2eproto.base,
  &scc_info_Rectangle_pbshape_2eproto.base,
  &scc_info_Scene_pbshape_2eproto.base,
  &scc_info_Scene_MapEllipseEntry_DoNotUse_pbshape_2eproto.base,
  &scc_info_Scene_MapLineEntry_DoNotUse_pbshape_2eproto.base,
  &scc_info_Scene_MapRectangleEntry_DoNotUse_pbshape_2eproto.base,
  &scc_info_Scene_MapScribbleEntry_DoNotUse_pbshape_2eproto.base,
  &scc_info_Scene_MapTriangleEntry_DoNotUse_pbshape_2eproto.base,
  &scc_info_Scribble_pbshape_2eproto.base,
  &scc_info_Scribble_MaperaserEntry_DoNotUse_pbshape_2eproto.base,
  &scc_info_Triangle_pbshape_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pbshape_2eproto_once;
static bool descriptor_table_pbshape_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbshape_2eproto = {
  &descriptor_table_pbshape_2eproto_initialized, descriptor_table_protodef_pbshape_2eproto, "pbshape.proto", 1816,
  &descriptor_table_pbshape_2eproto_once, descriptor_table_pbshape_2eproto_sccs, descriptor_table_pbshape_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_pbshape_2eproto::offsets,
  file_level_metadata_pbshape_2eproto, 17, file_level_enum_descriptors_pbshape_2eproto, file_level_service_descriptors_pbshape_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pbshape_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pbshape_2eproto), true);
namespace PBShape {

// ===================================================================

void Rect::InitAsDefaultInstance() {
}
class Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<Rect>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Rect::Rect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:PBShape.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&x_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // required int32 w = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // required int32 h = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Rect)
  return target;
}

size_t Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Rect)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (_internal_has_w()) {
    // required int32 w = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());
  }

  if (_internal_has_h()) {
    // required int32 h = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_h());
  }

  return total_size;
}
size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Rect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

    // required int32 w = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());

    // required int32 h = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pen::InitAsDefaultInstance() {
}
class Pen::_Internal {
 public:
  using HasBits = decltype(std::declval<Pen>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_capstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_joinstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Pen::Pen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Pen)
}
Pen::Pen(const Pen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&joinstyle_) -
    reinterpret_cast<char*>(&r_)) + sizeof(joinstyle_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Pen)
}

void Pen::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  width_ = 1;
  style_ = 1;
  capstyle_ = 32;
  joinstyle_ = 128;
}

Pen::~Pen() {
  // @@protoc_insertion_point(destructor:PBShape.Pen)
  SharedDtor();
}

void Pen::SharedDtor() {
}

void Pen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pen& Pen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pen_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Pen::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Pen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a_) -
        reinterpret_cast<char*>(&r_)) + sizeof(a_));
    width_ = 1;
    style_ = 1;
    capstyle_ = 32;
    joinstyle_ = 128;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 r = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 g = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 b = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 capstyle = 7 [default = 32];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_capstyle(&has_bits);
          capstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 joinstyle = 8 [default = 128];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_joinstyle(&has_bits);
          joinstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Pen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 r = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_r(), target);
  }

  // optional int32 g = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_g(), target);
  }

  // optional int32 b = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_b(), target);
  }

  // optional int32 a = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_a(), target);
  }

  // optional int32 style = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_style(), target);
  }

  // optional int32 capstyle = 7 [default = 32];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_capstyle(), target);
  }

  // optional int32 joinstyle = 8 [default = 128];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_joinstyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Pen)
  return target;
}

size_t Pen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Pen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 r = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_r());
    }

    // optional int32 g = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_g());
    }

    // optional int32 b = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_b());
    }

    // optional int32 a = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

    // optional int32 width = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 style = 6 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

    // optional int32 capstyle = 7 [default = 32];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_capstyle());
    }

    // optional int32 joinstyle = 8 [default = 128];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_joinstyle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Pen)
  GOOGLE_DCHECK_NE(&from, this);
  const Pen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Pen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Pen)
    MergeFrom(*source);
  }
}

void Pen::MergeFrom(const Pen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Pen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000040u) {
      capstyle_ = from.capstyle_;
    }
    if (cached_has_bits & 0x00000080u) {
      joinstyle_ = from.joinstyle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Pen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pen::CopyFrom(const Pen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Pen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pen::IsInitialized() const {
  return true;
}

void Pen::InternalSwap(Pen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(width_, other->width_);
  swap(style_, other->style_);
  swap(capstyle_, other->capstyle_);
  swap(joinstyle_, other->joinstyle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brush::InitAsDefaultInstance() {
}
class Brush::_Internal {
 public:
  using HasBits = decltype(std::declval<Brush>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Brush::Brush()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Brush)
}
Brush::Brush(const Brush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&r_)) + sizeof(style_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Brush)
}

void Brush::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  a_ = 255;
  style_ = 1;
}

Brush::~Brush() {
  // @@protoc_insertion_point(destructor:PBShape.Brush)
  SharedDtor();
}

void Brush::SharedDtor() {
}

void Brush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brush& Brush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brush_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Brush::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Brush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
    a_ = 255;
    style_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 r = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 g = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 b = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a = 4 [default = 255];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brush::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Brush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // optional int32 g = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // optional int32 b = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // optional int32 a = 4 [default = 255];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_a(), target);
  }

  // optional int32 style = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Brush)
  return target;
}

size_t Brush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Brush)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 r = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_r());
    }

    // optional int32 g = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_g());
    }

    // optional int32 b = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_b());
    }

    // optional int32 a = 4 [default = 255];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

    // optional int32 style = 5 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Brush)
  GOOGLE_DCHECK_NE(&from, this);
  const Brush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Brush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Brush)
    MergeFrom(*source);
  }
}

void Brush::MergeFrom(const Brush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Brush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Brush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brush::CopyFrom(const Brush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Brush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brush::IsInitialized() const {
  return true;
}

void Brush::InternalSwap(Brush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brush::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pos::InitAsDefaultInstance() {
}
class Pos::_Internal {
 public:
  using HasBits = decltype(std::declval<Pos>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pos::Pos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Pos)
}
Pos::Pos(const Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Pos)
}

void Pos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:PBShape.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
}

void Pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pos& Pos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pos_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Pos)
  return target;
}

size_t Pos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Pos)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Pos)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Pos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Pos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Pos)
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Pos::InternalSwap(Pos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Line::InitAsDefaultInstance() {
  ::PBShape::_Line_default_instance_._instance.get_mutable()->pos_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Line_default_instance_._instance.get_mutable()->p0_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Line_default_instance_._instance.get_mutable()->p1_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Line_default_instance_._instance.get_mutable()->pen_ = const_cast< ::PBShape::Pen*>(
      ::PBShape::Pen::internal_default_instance());
}
class Line::_Internal {
 public:
  using HasBits = decltype(std::declval<Line>()._has_bits_);
  static const ::PBShape::Pos& pos(const Line* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PBShape::Pos& p0(const Line* msg);
  static void set_has_p0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBShape::Pos& p1(const Line* msg);
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PBShape::Pen& pen(const Line* msg);
  static void set_has_pen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PBShape::Pos&
Line::_Internal::pos(const Line* msg) {
  return *msg->pos_;
}
const ::PBShape::Pos&
Line::_Internal::p0(const Line* msg) {
  return *msg->p0_;
}
const ::PBShape::Pos&
Line::_Internal::p1(const Line* msg) {
  return *msg->p1_;
}
const ::PBShape::Pen&
Line::_Internal::pen(const Line* msg) {
  return *msg->pen_;
}
Line::Line()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PBShape::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_p0()) {
    p0_ = new ::PBShape::Pos(*from.p0_);
  } else {
    p0_ = nullptr;
  }
  if (from._internal_has_p1()) {
    p1_ = new ::PBShape::Pos(*from.p1_);
  } else {
    p1_ = nullptr;
  }
  if (from._internal_has_pen()) {
    pen_ = new ::PBShape::Pen(*from.pen_);
  } else {
    pen_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:PBShape.Line)
}

void Line::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Line_pbshape_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(angle_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:PBShape.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete p0_;
  if (this != internal_default_instance()) delete p1_;
  if (this != internal_default_instance()) delete pen_;
}

void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Line& Line::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Line_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(p0_ != nullptr);
      p0_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(p1_ != nullptr);
      p1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pen_ != nullptr);
      pen_->Clear();
    }
  }
  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Line::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PBShape.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PBShape.Pos p0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PBShape.Pos p1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PBShape.Pen pen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Line::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PBShape.Pos pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // required .PBShape.Pos p0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::p0(this), target, stream);
  }

  // required .PBShape.Pos p1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::p1(this), target, stream);
  }

  // required .PBShape.Pen pen = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pen(this), target, stream);
  }

  // optional float angle = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Line)
  return target;
}

size_t Line::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Line)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_p0()) {
    // required .PBShape.Pos p0 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p0_);
  }

  if (_internal_has_p1()) {
    // required .PBShape.Pos p1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  if (_internal_has_pen()) {
    // required .PBShape.Pen pen = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pen_);
  }

  return total_size;
}
size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Line)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required .PBShape.Pos p0 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p0_);

    // required .PBShape.Pos p1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);

    // required .PBShape.Pen pen = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pen_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 5 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Line>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Line)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::PBShape::Pos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_p0()->::PBShape::Pos::MergeFrom(from._internal_p0());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_p1()->::PBShape::Pos::MergeFrom(from._internal_p1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pen()->::PBShape::Pen::MergeFrom(from._internal_pen());
    }
    if (cached_has_bits & 0x00000010u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Line::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_p0()) {
    if (!p0_->IsInitialized()) return false;
  }
  if (_internal_has_p1()) {
    if (!p1_->IsInitialized()) return false;
  }
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(p0_, other->p0_);
  swap(p1_, other->p1_);
  swap(pen_, other->pen_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
  ::PBShape::_Rectangle_default_instance_._instance.get_mutable()->pos_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Rectangle_default_instance_._instance.get_mutable()->pen_ = const_cast< ::PBShape::Pen*>(
      ::PBShape::Pen::internal_default_instance());
  ::PBShape::_Rectangle_default_instance_._instance.get_mutable()->brush_ = const_cast< ::PBShape::Brush*>(
      ::PBShape::Brush::internal_default_instance());
}
class Rectangle::_Internal {
 public:
  using HasBits = decltype(std::declval<Rectangle>()._has_bits_);
  static const ::PBShape::Pos& pos(const Rectangle* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PBShape::Pen& pen(const Rectangle* msg);
  static void set_has_pen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBShape::Brush& brush(const Rectangle* msg);
  static void set_has_brush(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PBShape::Pos&
Rectangle::_Internal::pos(const Rectangle* msg) {
  return *msg->pos_;
}
const ::PBShape::Pen&
Rectangle::_Internal::pen(const Rectangle* msg) {
  return *msg->pen_;
}
const ::PBShape::Brush&
Rectangle::_Internal::brush(const Rectangle* msg) {
  return *msg->brush_;
}
Rectangle::Rectangle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PBShape::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_pen()) {
    pen_ = new ::PBShape::Pen(*from.pen_);
  } else {
    pen_ = nullptr;
  }
  if (from._internal_has_brush()) {
    brush_ = new ::PBShape::Brush(*from.brush_);
  } else {
    brush_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Rectangle)
}

void Rectangle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rectangle_pbshape_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(angle_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:PBShape.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete pen_;
  if (this != internal_default_instance()) delete brush_;
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle& Rectangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rectangle_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pen_ != nullptr);
      pen_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brush_ != nullptr);
      brush_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&width_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PBShape.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PBShape.Pen pen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PBShape.Brush brush = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_brush(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rectangle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PBShape.Pos pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional .PBShape.Pen pen = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pen(this), target, stream);
  }

  // optional .PBShape.Brush brush = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::brush(this), target, stream);
  }

  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Rectangle)
  return target;
}

size_t Rectangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Rectangle)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Rectangle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .PBShape.Pen pen = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pen_);
    }

    // optional .PBShape.Brush brush = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brush_);
    }

  }
  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rectangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::PBShape::Pos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pen()->::PBShape::Pen::MergeFrom(from._internal_pen());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brush()->::PBShape::Brush::MergeFrom(from._internal_brush());
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(pen_, other->pen_);
  swap(brush_, other->brush_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ellipse::InitAsDefaultInstance() {
  ::PBShape::_Ellipse_default_instance_._instance.get_mutable()->pos_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Ellipse_default_instance_._instance.get_mutable()->pen_ = const_cast< ::PBShape::Pen*>(
      ::PBShape::Pen::internal_default_instance());
  ::PBShape::_Ellipse_default_instance_._instance.get_mutable()->brush_ = const_cast< ::PBShape::Brush*>(
      ::PBShape::Brush::internal_default_instance());
}
class Ellipse::_Internal {
 public:
  using HasBits = decltype(std::declval<Ellipse>()._has_bits_);
  static const ::PBShape::Pos& pos(const Ellipse* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PBShape::Pen& pen(const Ellipse* msg);
  static void set_has_pen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBShape::Brush& brush(const Ellipse* msg);
  static void set_has_brush(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PBShape::Pos&
Ellipse::_Internal::pos(const Ellipse* msg) {
  return *msg->pos_;
}
const ::PBShape::Pen&
Ellipse::_Internal::pen(const Ellipse* msg) {
  return *msg->pen_;
}
const ::PBShape::Brush&
Ellipse::_Internal::brush(const Ellipse* msg) {
  return *msg->brush_;
}
Ellipse::Ellipse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Ellipse)
}
Ellipse::Ellipse(const Ellipse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PBShape::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_pen()) {
    pen_ = new ::PBShape::Pen(*from.pen_);
  } else {
    pen_ = nullptr;
  }
  if (from._internal_has_brush()) {
    brush_ = new ::PBShape::Brush(*from.brush_);
  } else {
    brush_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Ellipse)
}

void Ellipse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ellipse_pbshape_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(angle_));
}

Ellipse::~Ellipse() {
  // @@protoc_insertion_point(destructor:PBShape.Ellipse)
  SharedDtor();
}

void Ellipse::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete pen_;
  if (this != internal_default_instance()) delete brush_;
}

void Ellipse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ellipse& Ellipse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ellipse_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Ellipse::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Ellipse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pen_ != nullptr);
      pen_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brush_ != nullptr);
      brush_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&width_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ellipse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PBShape.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PBShape.Pen pen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PBShape.Brush brush = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_brush(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ellipse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Ellipse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PBShape.Pos pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional .PBShape.Pen pen = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pen(this), target, stream);
  }

  // optional .PBShape.Brush brush = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::brush(this), target, stream);
  }

  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Ellipse)
  return target;
}

size_t Ellipse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Ellipse)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t Ellipse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Ellipse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .PBShape.Pen pen = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pen_);
    }

    // optional .PBShape.Brush brush = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brush_);
    }

  }
  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ellipse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Ellipse)
  GOOGLE_DCHECK_NE(&from, this);
  const Ellipse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ellipse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Ellipse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Ellipse)
    MergeFrom(*source);
  }
}

void Ellipse::MergeFrom(const Ellipse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Ellipse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::PBShape::Pos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pen()->::PBShape::Pen::MergeFrom(from._internal_pen());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brush()->::PBShape::Brush::MergeFrom(from._internal_brush());
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ellipse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Ellipse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ellipse::CopyFrom(const Ellipse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Ellipse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ellipse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  return true;
}

void Ellipse::InternalSwap(Ellipse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(pen_, other->pen_);
  swap(brush_, other->brush_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ellipse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Triangle::InitAsDefaultInstance() {
  ::PBShape::_Triangle_default_instance_._instance.get_mutable()->pos_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Triangle_default_instance_._instance.get_mutable()->pen_ = const_cast< ::PBShape::Pen*>(
      ::PBShape::Pen::internal_default_instance());
  ::PBShape::_Triangle_default_instance_._instance.get_mutable()->brush_ = const_cast< ::PBShape::Brush*>(
      ::PBShape::Brush::internal_default_instance());
}
class Triangle::_Internal {
 public:
  using HasBits = decltype(std::declval<Triangle>()._has_bits_);
  static const ::PBShape::Pos& pos(const Triangle* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PBShape::Pen& pen(const Triangle* msg);
  static void set_has_pen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBShape::Brush& brush(const Triangle* msg);
  static void set_has_brush(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PBShape::Pos&
Triangle::_Internal::pos(const Triangle* msg) {
  return *msg->pos_;
}
const ::PBShape::Pen&
Triangle::_Internal::pen(const Triangle* msg) {
  return *msg->pen_;
}
const ::PBShape::Brush&
Triangle::_Internal::brush(const Triangle* msg) {
  return *msg->brush_;
}
Triangle::Triangle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Triangle)
}
Triangle::Triangle(const Triangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PBShape::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_pen()) {
    pen_ = new ::PBShape::Pen(*from.pen_);
  } else {
    pen_ = nullptr;
  }
  if (from._internal_has_brush()) {
    brush_ = new ::PBShape::Brush(*from.brush_);
  } else {
    brush_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:PBShape.Triangle)
}

void Triangle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Triangle_pbshape_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(angle_));
}

Triangle::~Triangle() {
  // @@protoc_insertion_point(destructor:PBShape.Triangle)
  SharedDtor();
}

void Triangle::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete pen_;
  if (this != internal_default_instance()) delete brush_;
}

void Triangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Triangle& Triangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Triangle_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Triangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pen_ != nullptr);
      pen_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brush_ != nullptr);
      brush_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&width_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Triangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PBShape.Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PBShape.Pen pen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PBShape.Brush brush = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_brush(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Triangle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Triangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PBShape.Pos pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional .PBShape.Pen pen = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pen(this), target, stream);
  }

  // optional .PBShape.Brush brush = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::brush(this), target, stream);
  }

  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Triangle)
  return target;
}

size_t Triangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Triangle)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Triangle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .PBShape.Pos pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 height = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .PBShape.Pen pen = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pen_);
    }

    // optional .PBShape.Brush brush = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brush_);
    }

  }
  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Triangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Triangle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Triangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Triangle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Triangle)
    MergeFrom(*source);
  }
}

void Triangle::MergeFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::PBShape::Pos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pen()->::PBShape::Pen::MergeFrom(from._internal_pen());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brush()->::PBShape::Brush::MergeFrom(from._internal_brush());
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Triangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Triangle::CopyFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Triangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  return true;
}

void Triangle::InternalSwap(Triangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(pen_, other->pen_);
  swap(brush_, other->brush_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Triangle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Eraser::InitAsDefaultInstance() {
}
class Eraser::_Internal {
 public:
  using HasBits = decltype(std::declval<Eraser>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Eraser::Eraser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Eraser)
}
Eraser::Eraser(const Eraser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:PBShape.Eraser)
}

void Eraser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Eraser_pbshape_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
}

Eraser::~Eraser() {
  // @@protoc_insertion_point(destructor:PBShape.Eraser)
  SharedDtor();
}

void Eraser::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Eraser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Eraser& Eraser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Eraser_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Eraser::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Eraser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  width_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Eraser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Eraser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Eraser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_path(), target);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Eraser)
  return target;
}

size_t Eraser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Eraser)
  size_t total_size = 0;

  if (_internal_has_path()) {
    // required bytes path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path());
  }

  if (_internal_has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  return total_size;
}
size_t Eraser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Eraser)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path());

    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eraser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Eraser)
  GOOGLE_DCHECK_NE(&from, this);
  const Eraser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Eraser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Eraser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Eraser)
    MergeFrom(*source);
  }
}

void Eraser::MergeFrom(const Eraser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Eraser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Eraser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Eraser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eraser::CopyFrom(const Eraser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Eraser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eraser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Eraser::InternalSwap(Eraser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Eraser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Scribble_MaperaserEntry_DoNotUse::Scribble_MaperaserEntry_DoNotUse() {}
Scribble_MaperaserEntry_DoNotUse::Scribble_MaperaserEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scribble_MaperaserEntry_DoNotUse::MergeFrom(const Scribble_MaperaserEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scribble_MaperaserEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scribble_MaperaserEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Scribble::InitAsDefaultInstance() {
  ::PBShape::_Scribble_default_instance_._instance.get_mutable()->rect_ = const_cast< ::PBShape::Rect*>(
      ::PBShape::Rect::internal_default_instance());
  ::PBShape::_Scribble_default_instance_._instance.get_mutable()->pos_ = const_cast< ::PBShape::Pos*>(
      ::PBShape::Pos::internal_default_instance());
  ::PBShape::_Scribble_default_instance_._instance.get_mutable()->pen_ = const_cast< ::PBShape::Pen*>(
      ::PBShape::Pen::internal_default_instance());
}
class Scribble::_Internal {
 public:
  using HasBits = decltype(std::declval<Scribble>()._has_bits_);
  static const ::PBShape::Rect& rect(const Scribble* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBShape::Pos& pos(const Scribble* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PBShape::Pen& pen(const Scribble* msg);
  static void set_has_pen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PBShape::Rect&
Scribble::_Internal::rect(const Scribble* msg) {
  return *msg->rect_;
}
const ::PBShape::Pos&
Scribble::_Internal::pos(const Scribble* msg) {
  return *msg->pos_;
}
const ::PBShape::Pen&
Scribble::_Internal::pen(const Scribble* msg) {
  return *msg->pen_;
}
Scribble::Scribble()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Scribble)
}
Scribble::Scribble(const Scribble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maperaser_.MergeFrom(from.maperaser_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from._internal_has_rect()) {
    rect_ = new ::PBShape::Rect(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::PBShape::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_pen()) {
    pen_ = new ::PBShape::Pen(*from.pen_);
  } else {
    pen_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:PBShape.Scribble)
}

void Scribble::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scribble_pbshape_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(angle_));
}

Scribble::~Scribble() {
  // @@protoc_insertion_point(destructor:PBShape.Scribble)
  SharedDtor();
}

void Scribble::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete pen_;
}

void Scribble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scribble& Scribble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scribble_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Scribble::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Scribble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maperaser_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pen_ != nullptr);
      pen_->Clear();
    }
  }
  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scribble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .PBShape.Rect rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PBShape.Pos pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PBShape.Pen pen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .PBShape.Eraser> maperaser = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&maperaser_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float angle = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scribble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Scribble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PBShape.Rect rect = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rect(this), target, stream);
  }

  // required .PBShape.Pos pos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // required bytes path = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_path(), target);
  }

  // required .PBShape.Pen pen = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pen(this), target, stream);
  }

  // map<int32, .PBShape.Eraser> maperaser = 5;
  if (!this->_internal_maperaser().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_maperaser().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_maperaser().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >::const_iterator
          it = this->_internal_maperaser().begin();
          it != this->_internal_maperaser().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scribble_MaperaserEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >::const_iterator
          it = this->_internal_maperaser().begin();
          it != this->_internal_maperaser().end(); ++it) {
        target = Scribble_MaperaserEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  // optional float angle = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Scribble)
  return target;
}

size_t Scribble::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PBShape.Scribble)
  size_t total_size = 0;

  if (_internal_has_path()) {
    // required bytes path = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path());
  }

  if (_internal_has_rect()) {
    // required .PBShape.Rect rect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  if (_internal_has_pos()) {
    // required .PBShape.Pos pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_pen()) {
    // required .PBShape.Pen pen = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pen_);
  }

  return total_size;
}
size_t Scribble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Scribble)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes path = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path());

    // required .PBShape.Rect rect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);

    // required .PBShape.Pos pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required .PBShape.Pen pen = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pen_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .PBShape.Eraser> maperaser = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_maperaser_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >::const_iterator
      it = this->_internal_maperaser().begin();
      it != this->_internal_maperaser().end(); ++it) {
    total_size += Scribble_MaperaserEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional float angle = 6 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scribble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Scribble)
  GOOGLE_DCHECK_NE(&from, this);
  const Scribble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scribble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Scribble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Scribble)
    MergeFrom(*source);
  }
}

void Scribble::MergeFrom(const Scribble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Scribble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maperaser_.MergeFrom(from.maperaser_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rect()->::PBShape::Rect::MergeFrom(from._internal_rect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pos()->::PBShape::Pos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pen()->::PBShape::Pen::MergeFrom(from._internal_pen());
    }
    if (cached_has_bits & 0x00000010u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scribble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Scribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scribble::CopyFrom(const Scribble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Scribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scribble::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(maperaser_)) return false;
  if (_internal_has_rect()) {
    if (!rect_->IsInitialized()) return false;
  }
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  return true;
}

void Scribble::InternalSwap(Scribble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  maperaser_.Swap(&other->maperaser_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rect_, other->rect_);
  swap(pos_, other->pos_);
  swap(pen_, other->pen_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scribble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Scene_MapLineEntry_DoNotUse::Scene_MapLineEntry_DoNotUse() {}
Scene_MapLineEntry_DoNotUse::Scene_MapLineEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scene_MapLineEntry_DoNotUse::MergeFrom(const Scene_MapLineEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scene_MapLineEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scene_MapLineEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Scene_MapRectangleEntry_DoNotUse::Scene_MapRectangleEntry_DoNotUse() {}
Scene_MapRectangleEntry_DoNotUse::Scene_MapRectangleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scene_MapRectangleEntry_DoNotUse::MergeFrom(const Scene_MapRectangleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scene_MapRectangleEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scene_MapRectangleEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Scene_MapEllipseEntry_DoNotUse::Scene_MapEllipseEntry_DoNotUse() {}
Scene_MapEllipseEntry_DoNotUse::Scene_MapEllipseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scene_MapEllipseEntry_DoNotUse::MergeFrom(const Scene_MapEllipseEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scene_MapEllipseEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scene_MapEllipseEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Scene_MapTriangleEntry_DoNotUse::Scene_MapTriangleEntry_DoNotUse() {}
Scene_MapTriangleEntry_DoNotUse::Scene_MapTriangleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scene_MapTriangleEntry_DoNotUse::MergeFrom(const Scene_MapTriangleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scene_MapTriangleEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scene_MapTriangleEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Scene_MapScribbleEntry_DoNotUse::Scene_MapScribbleEntry_DoNotUse() {}
Scene_MapScribbleEntry_DoNotUse::Scene_MapScribbleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scene_MapScribbleEntry_DoNotUse::MergeFrom(const Scene_MapScribbleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scene_MapScribbleEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scene_MapScribbleEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Scene::InitAsDefaultInstance() {
}
class Scene::_Internal {
 public:
  using HasBits = decltype(std::declval<Scene>()._has_bits_);
};

Scene::Scene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBShape.Scene)
}
Scene::Scene(const Scene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapline_.MergeFrom(from.mapline_);
  maprectangle_.MergeFrom(from.maprectangle_);
  mapellipse_.MergeFrom(from.mapellipse_);
  maptriangle_.MergeFrom(from.maptriangle_);
  mapscribble_.MergeFrom(from.mapscribble_);
  // @@protoc_insertion_point(copy_constructor:PBShape.Scene)
}

void Scene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_pbshape_2eproto.base);
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:PBShape.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
}

void Scene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene& Scene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_pbshape_2eproto.base);
  return *internal_default_instance();
}


void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:PBShape.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapline_.Clear();
  maprectangle_.Clear();
  mapellipse_.Clear();
  maptriangle_.Clear();
  mapscribble_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .PBShape.Line> mapLine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapline_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .PBShape.Rectangle> mapRectangle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&maprectangle_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .PBShape.Ellipse> mapEllipse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapellipse_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .PBShape.Triangle> mapTriangle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&maptriangle_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .PBShape.Scribble> mapScribble = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapscribble_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBShape.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .PBShape.Line> mapLine = 1;
  if (!this->_internal_mapline().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mapline().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mapline().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >::const_iterator
          it = this->_internal_mapline().begin();
          it != this->_internal_mapline().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scene_MapLineEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >::const_iterator
          it = this->_internal_mapline().begin();
          it != this->_internal_mapline().end(); ++it) {
        target = Scene_MapLineEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .PBShape.Rectangle> mapRectangle = 2;
  if (!this->_internal_maprectangle().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_maprectangle().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_maprectangle().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >::const_iterator
          it = this->_internal_maprectangle().begin();
          it != this->_internal_maprectangle().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scene_MapRectangleEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >::const_iterator
          it = this->_internal_maprectangle().begin();
          it != this->_internal_maprectangle().end(); ++it) {
        target = Scene_MapRectangleEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .PBShape.Ellipse> mapEllipse = 3;
  if (!this->_internal_mapellipse().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mapellipse().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mapellipse().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >::const_iterator
          it = this->_internal_mapellipse().begin();
          it != this->_internal_mapellipse().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scene_MapEllipseEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >::const_iterator
          it = this->_internal_mapellipse().begin();
          it != this->_internal_mapellipse().end(); ++it) {
        target = Scene_MapEllipseEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .PBShape.Triangle> mapTriangle = 4;
  if (!this->_internal_maptriangle().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_maptriangle().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_maptriangle().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >::const_iterator
          it = this->_internal_maptriangle().begin();
          it != this->_internal_maptriangle().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scene_MapTriangleEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >::const_iterator
          it = this->_internal_maptriangle().begin();
          it != this->_internal_maptriangle().end(); ++it) {
        target = Scene_MapTriangleEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .PBShape.Scribble> mapScribble = 5;
  if (!this->_internal_mapscribble().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mapscribble().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mapscribble().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >::const_iterator
          it = this->_internal_mapscribble().begin();
          it != this->_internal_mapscribble().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scene_MapScribbleEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >::const_iterator
          it = this->_internal_mapscribble().begin();
          it != this->_internal_mapscribble().end(); ++it) {
        target = Scene_MapScribbleEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBShape.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBShape.Scene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .PBShape.Line> mapLine = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapline_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >::const_iterator
      it = this->_internal_mapline().begin();
      it != this->_internal_mapline().end(); ++it) {
    total_size += Scene_MapLineEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .PBShape.Rectangle> mapRectangle = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_maprectangle_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >::const_iterator
      it = this->_internal_maprectangle().begin();
      it != this->_internal_maprectangle().end(); ++it) {
    total_size += Scene_MapRectangleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .PBShape.Ellipse> mapEllipse = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapellipse_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >::const_iterator
      it = this->_internal_mapellipse().begin();
      it != this->_internal_mapellipse().end(); ++it) {
    total_size += Scene_MapEllipseEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .PBShape.Triangle> mapTriangle = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_maptriangle_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >::const_iterator
      it = this->_internal_maptriangle().begin();
      it != this->_internal_maptriangle().end(); ++it) {
    total_size += Scene_MapTriangleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .PBShape.Scribble> mapScribble = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapscribble_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >::const_iterator
      it = this->_internal_mapscribble().begin();
      it != this->_internal_mapscribble().end(); ++it) {
    total_size += Scene_MapScribbleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBShape.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBShape.Scene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBShape.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBShape.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapline_.MergeFrom(from.mapline_);
  maprectangle_.MergeFrom(from.maprectangle_);
  mapellipse_.MergeFrom(from.mapellipse_);
  maptriangle_.MergeFrom(from.maptriangle_);
  mapscribble_.MergeFrom(from.mapscribble_);
}

void Scene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBShape.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBShape.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mapline_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(maprectangle_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mapellipse_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(maptriangle_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mapscribble_)) return false;
  return true;
}

void Scene::InternalSwap(Scene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mapline_.Swap(&other->mapline_);
  maprectangle_.Swap(&other->maprectangle_);
  mapellipse_.Swap(&other->mapellipse_);
  maptriangle_.Swap(&other->maptriangle_);
  mapscribble_.Swap(&other->mapscribble_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PBShape
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBShape::Rect* Arena::CreateMaybeMessage< ::PBShape::Rect >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Pen* Arena::CreateMaybeMessage< ::PBShape::Pen >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Pen >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Brush* Arena::CreateMaybeMessage< ::PBShape::Brush >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Brush >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Pos* Arena::CreateMaybeMessage< ::PBShape::Pos >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Line* Arena::CreateMaybeMessage< ::PBShape::Line >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Rectangle* Arena::CreateMaybeMessage< ::PBShape::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Ellipse* Arena::CreateMaybeMessage< ::PBShape::Ellipse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Ellipse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Triangle* Arena::CreateMaybeMessage< ::PBShape::Triangle >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Triangle >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Eraser* Arena::CreateMaybeMessage< ::PBShape::Eraser >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Eraser >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scribble_MaperaserEntry_DoNotUse* Arena::CreateMaybeMessage< ::PBShape::Scribble_MaperaserEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scribble_MaperaserEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scribble* Arena::CreateMaybeMessage< ::PBShape::Scribble >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scribble >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scene_MapLineEntry_DoNotUse* Arena::CreateMaybeMessage< ::PBShape::Scene_MapLineEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scene_MapLineEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scene_MapRectangleEntry_DoNotUse* Arena::CreateMaybeMessage< ::PBShape::Scene_MapRectangleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scene_MapRectangleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scene_MapEllipseEntry_DoNotUse* Arena::CreateMaybeMessage< ::PBShape::Scene_MapEllipseEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scene_MapEllipseEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scene_MapTriangleEntry_DoNotUse* Arena::CreateMaybeMessage< ::PBShape::Scene_MapTriangleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scene_MapTriangleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scene_MapScribbleEntry_DoNotUse* Arena::CreateMaybeMessage< ::PBShape::Scene_MapScribbleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scene_MapScribbleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PBShape::Scene* Arena::CreateMaybeMessage< ::PBShape::Scene >(Arena* arena) {
  return Arena::CreateInternal< ::PBShape::Scene >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
