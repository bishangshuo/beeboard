// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbshape.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pbshape_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pbshape_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pbshape_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pbshape_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbshape_2eproto;
namespace PBShape {
class Brush;
class BrushDefaultTypeInternal;
extern BrushDefaultTypeInternal _Brush_default_instance_;
class Ellipse;
class EllipseDefaultTypeInternal;
extern EllipseDefaultTypeInternal _Ellipse_default_instance_;
class Eraser;
class EraserDefaultTypeInternal;
extern EraserDefaultTypeInternal _Eraser_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Pen;
class PenDefaultTypeInternal;
extern PenDefaultTypeInternal _Pen_default_instance_;
class Pos;
class PosDefaultTypeInternal;
extern PosDefaultTypeInternal _Pos_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Scene_MapEllipseEntry_DoNotUse;
class Scene_MapEllipseEntry_DoNotUseDefaultTypeInternal;
extern Scene_MapEllipseEntry_DoNotUseDefaultTypeInternal _Scene_MapEllipseEntry_DoNotUse_default_instance_;
class Scene_MapLineEntry_DoNotUse;
class Scene_MapLineEntry_DoNotUseDefaultTypeInternal;
extern Scene_MapLineEntry_DoNotUseDefaultTypeInternal _Scene_MapLineEntry_DoNotUse_default_instance_;
class Scene_MapRectangleEntry_DoNotUse;
class Scene_MapRectangleEntry_DoNotUseDefaultTypeInternal;
extern Scene_MapRectangleEntry_DoNotUseDefaultTypeInternal _Scene_MapRectangleEntry_DoNotUse_default_instance_;
class Scene_MapScribbleEntry_DoNotUse;
class Scene_MapScribbleEntry_DoNotUseDefaultTypeInternal;
extern Scene_MapScribbleEntry_DoNotUseDefaultTypeInternal _Scene_MapScribbleEntry_DoNotUse_default_instance_;
class Scene_MapTriangleEntry_DoNotUse;
class Scene_MapTriangleEntry_DoNotUseDefaultTypeInternal;
extern Scene_MapTriangleEntry_DoNotUseDefaultTypeInternal _Scene_MapTriangleEntry_DoNotUse_default_instance_;
class Scribble;
class ScribbleDefaultTypeInternal;
extern ScribbleDefaultTypeInternal _Scribble_default_instance_;
class Scribble_MaperaserEntry_DoNotUse;
class Scribble_MaperaserEntry_DoNotUseDefaultTypeInternal;
extern Scribble_MaperaserEntry_DoNotUseDefaultTypeInternal _Scribble_MaperaserEntry_DoNotUse_default_instance_;
class Triangle;
class TriangleDefaultTypeInternal;
extern TriangleDefaultTypeInternal _Triangle_default_instance_;
}  // namespace PBShape
PROTOBUF_NAMESPACE_OPEN
template<> ::PBShape::Brush* Arena::CreateMaybeMessage<::PBShape::Brush>(Arena*);
template<> ::PBShape::Ellipse* Arena::CreateMaybeMessage<::PBShape::Ellipse>(Arena*);
template<> ::PBShape::Eraser* Arena::CreateMaybeMessage<::PBShape::Eraser>(Arena*);
template<> ::PBShape::Line* Arena::CreateMaybeMessage<::PBShape::Line>(Arena*);
template<> ::PBShape::Pen* Arena::CreateMaybeMessage<::PBShape::Pen>(Arena*);
template<> ::PBShape::Pos* Arena::CreateMaybeMessage<::PBShape::Pos>(Arena*);
template<> ::PBShape::Rect* Arena::CreateMaybeMessage<::PBShape::Rect>(Arena*);
template<> ::PBShape::Rectangle* Arena::CreateMaybeMessage<::PBShape::Rectangle>(Arena*);
template<> ::PBShape::Scene* Arena::CreateMaybeMessage<::PBShape::Scene>(Arena*);
template<> ::PBShape::Scene_MapEllipseEntry_DoNotUse* Arena::CreateMaybeMessage<::PBShape::Scene_MapEllipseEntry_DoNotUse>(Arena*);
template<> ::PBShape::Scene_MapLineEntry_DoNotUse* Arena::CreateMaybeMessage<::PBShape::Scene_MapLineEntry_DoNotUse>(Arena*);
template<> ::PBShape::Scene_MapRectangleEntry_DoNotUse* Arena::CreateMaybeMessage<::PBShape::Scene_MapRectangleEntry_DoNotUse>(Arena*);
template<> ::PBShape::Scene_MapScribbleEntry_DoNotUse* Arena::CreateMaybeMessage<::PBShape::Scene_MapScribbleEntry_DoNotUse>(Arena*);
template<> ::PBShape::Scene_MapTriangleEntry_DoNotUse* Arena::CreateMaybeMessage<::PBShape::Scene_MapTriangleEntry_DoNotUse>(Arena*);
template<> ::PBShape::Scribble* Arena::CreateMaybeMessage<::PBShape::Scribble>(Arena*);
template<> ::PBShape::Scribble_MaperaserEntry_DoNotUse* Arena::CreateMaybeMessage<::PBShape::Scribble_MaperaserEntry_DoNotUse>(Arena*);
template<> ::PBShape::Triangle* Arena::CreateMaybeMessage<::PBShape::Triangle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PBShape {

// ===================================================================

class Rect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Rect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Pen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Pen) */ {
 public:
  Pen();
  virtual ~Pen();

  Pen(const Pen& from);
  Pen(Pen&& from) noexcept
    : Pen() {
    *this = ::std::move(from);
  }

  inline Pen& operator=(const Pen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pen& operator=(Pen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pen* internal_default_instance() {
    return reinterpret_cast<const Pen*>(
               &_Pen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pen& a, Pen& b) {
    a.Swap(&b);
  }
  inline void Swap(Pen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pen* New() const final {
    return CreateMaybeMessage<Pen>(nullptr);
  }

  Pen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pen& from);
  void MergeFrom(const Pen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Pen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 2,
    kGFieldNumber = 3,
    kBFieldNumber = 4,
    kAFieldNumber = 5,
    kWidthFieldNumber = 1,
    kStyleFieldNumber = 6,
    kCapstyleFieldNumber = 7,
    kJoinstyleFieldNumber = 8,
  };
  // optional int32 r = 2 [default = 0];
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 g = 3 [default = 0];
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 b = 4 [default = 0];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 a = 5 [default = 0];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 1 [default = 1];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 style = 6 [default = 1];
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::PROTOBUF_NAMESPACE_ID::int32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_style() const;
  void _internal_set_style(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 capstyle = 7 [default = 32];
  bool has_capstyle() const;
  private:
  bool _internal_has_capstyle() const;
  public:
  void clear_capstyle();
  ::PROTOBUF_NAMESPACE_ID::int32 capstyle() const;
  void set_capstyle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_capstyle() const;
  void _internal_set_capstyle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 joinstyle = 8 [default = 128];
  bool has_joinstyle() const;
  private:
  bool _internal_has_joinstyle() const;
  public:
  void clear_joinstyle();
  ::PROTOBUF_NAMESPACE_ID::int32 joinstyle() const;
  void set_joinstyle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joinstyle() const;
  void _internal_set_joinstyle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Pen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 style_;
  ::PROTOBUF_NAMESPACE_ID::int32 capstyle_;
  ::PROTOBUF_NAMESPACE_ID::int32 joinstyle_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Brush :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Brush) */ {
 public:
  Brush();
  virtual ~Brush();

  Brush(const Brush& from);
  Brush(Brush&& from) noexcept
    : Brush() {
    *this = ::std::move(from);
  }

  inline Brush& operator=(const Brush& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brush& operator=(Brush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brush* internal_default_instance() {
    return reinterpret_cast<const Brush*>(
               &_Brush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Brush& a, Brush& b) {
    a.Swap(&b);
  }
  inline void Swap(Brush* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brush* New() const final {
    return CreateMaybeMessage<Brush>(nullptr);
  }

  Brush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brush& from);
  void MergeFrom(const Brush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Brush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
    kStyleFieldNumber = 5,
  };
  // optional int32 r = 1 [default = 0];
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 g = 2 [default = 0];
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 b = 3 [default = 0];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 a = 4 [default = 255];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 style = 5 [default = 1];
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::PROTOBUF_NAMESPACE_ID::int32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_style() const;
  void _internal_set_style(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Brush)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 style_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Pos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Pos) */ {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);
  Pos(Pos&& from) noexcept
    : Pos() {
    *this = ::std::move(from);
  }

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pos& operator=(Pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pos* internal_default_instance() {
    return reinterpret_cast<const Pos*>(
               &_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pos& a, Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Pos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pos* New() const final {
    return CreateMaybeMessage<Pos>(nullptr);
  }

  Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Pos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Pos)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Line :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(nullptr);
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Line";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP0FieldNumber = 1,
    kP1FieldNumber = 2,
    kPenFieldNumber = 3,
    kAngleFieldNumber = 4,
  };
  // required .PBShape.Pos p0 = 1;
  bool has_p0() const;
  private:
  bool _internal_has_p0() const;
  public:
  void clear_p0();
  const ::PBShape::Pos& p0() const;
  ::PBShape::Pos* release_p0();
  ::PBShape::Pos* mutable_p0();
  void set_allocated_p0(::PBShape::Pos* p0);
  private:
  const ::PBShape::Pos& _internal_p0() const;
  ::PBShape::Pos* _internal_mutable_p0();
  public:

  // required .PBShape.Pos p1 = 2;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  const ::PBShape::Pos& p1() const;
  ::PBShape::Pos* release_p1();
  ::PBShape::Pos* mutable_p1();
  void set_allocated_p1(::PBShape::Pos* p1);
  private:
  const ::PBShape::Pos& _internal_p1() const;
  ::PBShape::Pos* _internal_mutable_p1();
  public:

  // required .PBShape.Pen pen = 3;
  bool has_pen() const;
  private:
  bool _internal_has_pen() const;
  public:
  void clear_pen();
  const ::PBShape::Pen& pen() const;
  ::PBShape::Pen* release_pen();
  ::PBShape::Pen* mutable_pen();
  void set_allocated_pen(::PBShape::Pen* pen);
  private:
  const ::PBShape::Pen& _internal_pen() const;
  ::PBShape::Pen* _internal_mutable_pen();
  public:

  // optional float angle = 4 [default = 0];
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Line)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PBShape::Pos* p0_;
  ::PBShape::Pos* p1_;
  ::PBShape::Pen* pen_;
  float angle_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Rectangle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Rectangle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kPenFieldNumber = 4,
    kBrushFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kAngleFieldNumber = 6,
  };
  // required .PBShape.Pos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PBShape::Pos& pos() const;
  ::PBShape::Pos* release_pos();
  ::PBShape::Pos* mutable_pos();
  void set_allocated_pos(::PBShape::Pos* pos);
  private:
  const ::PBShape::Pos& _internal_pos() const;
  ::PBShape::Pos* _internal_mutable_pos();
  public:

  // optional .PBShape.Pen pen = 4;
  bool has_pen() const;
  private:
  bool _internal_has_pen() const;
  public:
  void clear_pen();
  const ::PBShape::Pen& pen() const;
  ::PBShape::Pen* release_pen();
  ::PBShape::Pen* mutable_pen();
  void set_allocated_pen(::PBShape::Pen* pen);
  private:
  const ::PBShape::Pen& _internal_pen() const;
  ::PBShape::Pen* _internal_mutable_pen();
  public:

  // optional .PBShape.Brush brush = 5;
  bool has_brush() const;
  private:
  bool _internal_has_brush() const;
  public:
  void clear_brush();
  const ::PBShape::Brush& brush() const;
  ::PBShape::Brush* release_brush();
  ::PBShape::Brush* mutable_brush();
  void set_allocated_brush(::PBShape::Brush* brush);
  private:
  const ::PBShape::Brush& _internal_brush() const;
  ::PBShape::Brush* _internal_mutable_brush();
  public:

  // required int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float angle = 6 [default = 0];
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Rectangle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PBShape::Pos* pos_;
  ::PBShape::Pen* pen_;
  ::PBShape::Brush* brush_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float angle_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Ellipse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Ellipse) */ {
 public:
  Ellipse();
  virtual ~Ellipse();

  Ellipse(const Ellipse& from);
  Ellipse(Ellipse&& from) noexcept
    : Ellipse() {
    *this = ::std::move(from);
  }

  inline Ellipse& operator=(const Ellipse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ellipse& operator=(Ellipse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ellipse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ellipse* internal_default_instance() {
    return reinterpret_cast<const Ellipse*>(
               &_Ellipse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Ellipse& a, Ellipse& b) {
    a.Swap(&b);
  }
  inline void Swap(Ellipse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ellipse* New() const final {
    return CreateMaybeMessage<Ellipse>(nullptr);
  }

  Ellipse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ellipse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ellipse& from);
  void MergeFrom(const Ellipse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ellipse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Ellipse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kPenFieldNumber = 4,
    kBrushFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kAngleFieldNumber = 6,
  };
  // required .PBShape.Pos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PBShape::Pos& pos() const;
  ::PBShape::Pos* release_pos();
  ::PBShape::Pos* mutable_pos();
  void set_allocated_pos(::PBShape::Pos* pos);
  private:
  const ::PBShape::Pos& _internal_pos() const;
  ::PBShape::Pos* _internal_mutable_pos();
  public:

  // optional .PBShape.Pen pen = 4;
  bool has_pen() const;
  private:
  bool _internal_has_pen() const;
  public:
  void clear_pen();
  const ::PBShape::Pen& pen() const;
  ::PBShape::Pen* release_pen();
  ::PBShape::Pen* mutable_pen();
  void set_allocated_pen(::PBShape::Pen* pen);
  private:
  const ::PBShape::Pen& _internal_pen() const;
  ::PBShape::Pen* _internal_mutable_pen();
  public:

  // optional .PBShape.Brush brush = 5;
  bool has_brush() const;
  private:
  bool _internal_has_brush() const;
  public:
  void clear_brush();
  const ::PBShape::Brush& brush() const;
  ::PBShape::Brush* release_brush();
  ::PBShape::Brush* mutable_brush();
  void set_allocated_brush(::PBShape::Brush* brush);
  private:
  const ::PBShape::Brush& _internal_brush() const;
  ::PBShape::Brush* _internal_mutable_brush();
  public:

  // required int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float angle = 6 [default = 0];
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Ellipse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PBShape::Pos* pos_;
  ::PBShape::Pen* pen_;
  ::PBShape::Brush* brush_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float angle_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Triangle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Triangle) */ {
 public:
  Triangle();
  virtual ~Triangle();

  Triangle(const Triangle& from);
  Triangle(Triangle&& from) noexcept
    : Triangle() {
    *this = ::std::move(from);
  }

  inline Triangle& operator=(const Triangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Triangle& operator=(Triangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Triangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Triangle* internal_default_instance() {
    return reinterpret_cast<const Triangle*>(
               &_Triangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Triangle& a, Triangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Triangle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Triangle* New() const final {
    return CreateMaybeMessage<Triangle>(nullptr);
  }

  Triangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Triangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Triangle& from);
  void MergeFrom(const Triangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Triangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Triangle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kPenFieldNumber = 4,
    kBrushFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kAngleFieldNumber = 6,
  };
  // required .PBShape.Pos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PBShape::Pos& pos() const;
  ::PBShape::Pos* release_pos();
  ::PBShape::Pos* mutable_pos();
  void set_allocated_pos(::PBShape::Pos* pos);
  private:
  const ::PBShape::Pos& _internal_pos() const;
  ::PBShape::Pos* _internal_mutable_pos();
  public:

  // optional .PBShape.Pen pen = 4;
  bool has_pen() const;
  private:
  bool _internal_has_pen() const;
  public:
  void clear_pen();
  const ::PBShape::Pen& pen() const;
  ::PBShape::Pen* release_pen();
  ::PBShape::Pen* mutable_pen();
  void set_allocated_pen(::PBShape::Pen* pen);
  private:
  const ::PBShape::Pen& _internal_pen() const;
  ::PBShape::Pen* _internal_mutable_pen();
  public:

  // optional .PBShape.Brush brush = 5;
  bool has_brush() const;
  private:
  bool _internal_has_brush() const;
  public:
  void clear_brush();
  const ::PBShape::Brush& brush() const;
  ::PBShape::Brush* release_brush();
  ::PBShape::Brush* mutable_brush();
  void set_allocated_brush(::PBShape::Brush* brush);
  private:
  const ::PBShape::Brush& _internal_brush() const;
  ::PBShape::Brush* _internal_mutable_brush();
  public:

  // required int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float angle = 6 [default = 0];
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Triangle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PBShape::Pos* pos_;
  ::PBShape::Pen* pen_;
  ::PBShape::Brush* brush_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float angle_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Eraser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Eraser) */ {
 public:
  Eraser();
  virtual ~Eraser();

  Eraser(const Eraser& from);
  Eraser(Eraser&& from) noexcept
    : Eraser() {
    *this = ::std::move(from);
  }

  inline Eraser& operator=(const Eraser& from) {
    CopyFrom(from);
    return *this;
  }
  inline Eraser& operator=(Eraser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Eraser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Eraser* internal_default_instance() {
    return reinterpret_cast<const Eraser*>(
               &_Eraser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Eraser& a, Eraser& b) {
    a.Swap(&b);
  }
  inline void Swap(Eraser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Eraser* New() const final {
    return CreateMaybeMessage<Eraser>(nullptr);
  }

  Eraser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Eraser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Eraser& from);
  void MergeFrom(const Eraser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Eraser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Eraser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // required bytes path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Eraser)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Scribble_MaperaserEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scribble_MaperaserEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scribble_MaperaserEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scribble_MaperaserEntry_DoNotUse();
  Scribble_MaperaserEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scribble_MaperaserEntry_DoNotUse& other);
  static const Scribble_MaperaserEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scribble_MaperaserEntry_DoNotUse*>(&_Scribble_MaperaserEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class Scribble :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Scribble) */ {
 public:
  Scribble();
  virtual ~Scribble();

  Scribble(const Scribble& from);
  Scribble(Scribble&& from) noexcept
    : Scribble() {
    *this = ::std::move(from);
  }

  inline Scribble& operator=(const Scribble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scribble& operator=(Scribble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scribble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scribble* internal_default_instance() {
    return reinterpret_cast<const Scribble*>(
               &_Scribble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Scribble& a, Scribble& b) {
    a.Swap(&b);
  }
  inline void Swap(Scribble* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scribble* New() const final {
    return CreateMaybeMessage<Scribble>(nullptr);
  }

  Scribble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scribble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scribble& from);
  void MergeFrom(const Scribble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scribble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Scribble";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMaperaserFieldNumber = 5,
    kPathFieldNumber = 3,
    kRectFieldNumber = 1,
    kPosFieldNumber = 2,
    kPenFieldNumber = 4,
    kAngleFieldNumber = 6,
  };
  // map<int32, .PBShape.Eraser> maperaser = 5;
  int maperaser_size() const;
  private:
  int _internal_maperaser_size() const;
  public:
  void clear_maperaser();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >&
      _internal_maperaser() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >*
      _internal_mutable_maperaser();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >&
      maperaser() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >*
      mutable_maperaser();

  // required bytes path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required .PBShape.Rect rect = 1;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::PBShape::Rect& rect() const;
  ::PBShape::Rect* release_rect();
  ::PBShape::Rect* mutable_rect();
  void set_allocated_rect(::PBShape::Rect* rect);
  private:
  const ::PBShape::Rect& _internal_rect() const;
  ::PBShape::Rect* _internal_mutable_rect();
  public:

  // required .PBShape.Pos pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PBShape::Pos& pos() const;
  ::PBShape::Pos* release_pos();
  ::PBShape::Pos* mutable_pos();
  void set_allocated_pos(::PBShape::Pos* pos);
  private:
  const ::PBShape::Pos& _internal_pos() const;
  ::PBShape::Pos* _internal_mutable_pos();
  public:

  // required .PBShape.Pen pen = 4;
  bool has_pen() const;
  private:
  bool _internal_has_pen() const;
  public:
  void clear_pen();
  const ::PBShape::Pen& pen() const;
  ::PBShape::Pen* release_pen();
  ::PBShape::Pen* mutable_pen();
  void set_allocated_pen(::PBShape::Pen* pen);
  private:
  const ::PBShape::Pen& _internal_pen() const;
  ::PBShape::Pen* _internal_mutable_pen();
  public:

  // optional float angle = 6 [default = 0];
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:PBShape.Scribble)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scribble_MaperaserEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > maperaser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PBShape::Rect* rect_;
  ::PBShape::Pos* pos_;
  ::PBShape::Pen* pen_;
  float angle_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// -------------------------------------------------------------------

class Scene_MapLineEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapLineEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapLineEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scene_MapLineEntry_DoNotUse();
  Scene_MapLineEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scene_MapLineEntry_DoNotUse& other);
  static const Scene_MapLineEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scene_MapLineEntry_DoNotUse*>(&_Scene_MapLineEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class Scene_MapRectangleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapRectangleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapRectangleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scene_MapRectangleEntry_DoNotUse();
  Scene_MapRectangleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scene_MapRectangleEntry_DoNotUse& other);
  static const Scene_MapRectangleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scene_MapRectangleEntry_DoNotUse*>(&_Scene_MapRectangleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class Scene_MapEllipseEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapEllipseEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapEllipseEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scene_MapEllipseEntry_DoNotUse();
  Scene_MapEllipseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scene_MapEllipseEntry_DoNotUse& other);
  static const Scene_MapEllipseEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scene_MapEllipseEntry_DoNotUse*>(&_Scene_MapEllipseEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class Scene_MapTriangleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapTriangleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapTriangleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scene_MapTriangleEntry_DoNotUse();
  Scene_MapTriangleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scene_MapTriangleEntry_DoNotUse& other);
  static const Scene_MapTriangleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scene_MapTriangleEntry_DoNotUse*>(&_Scene_MapTriangleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class Scene_MapScribbleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapScribbleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scene_MapScribbleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scene_MapScribbleEntry_DoNotUse();
  Scene_MapScribbleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scene_MapScribbleEntry_DoNotUse& other);
  static const Scene_MapScribbleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scene_MapScribbleEntry_DoNotUse*>(&_Scene_MapScribbleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class Scene :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBShape.Scene) */ {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(nullptr);
  }

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBShape.Scene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbshape_2eproto);
    return ::descriptor_table_pbshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapLineFieldNumber = 1,
    kMapRectangleFieldNumber = 2,
    kMapEllipseFieldNumber = 3,
    kMapTriangleFieldNumber = 4,
    kMapScribbleFieldNumber = 5,
  };
  // map<int32, .PBShape.Line> mapLine = 1;
  int mapline_size() const;
  private:
  int _internal_mapline_size() const;
  public:
  void clear_mapline();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >&
      _internal_mapline() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >*
      _internal_mutable_mapline();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >&
      mapline() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >*
      mutable_mapline();

  // map<int32, .PBShape.Rectangle> mapRectangle = 2;
  int maprectangle_size() const;
  private:
  int _internal_maprectangle_size() const;
  public:
  void clear_maprectangle();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >&
      _internal_maprectangle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >*
      _internal_mutable_maprectangle();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >&
      maprectangle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >*
      mutable_maprectangle();

  // map<int32, .PBShape.Ellipse> mapEllipse = 3;
  int mapellipse_size() const;
  private:
  int _internal_mapellipse_size() const;
  public:
  void clear_mapellipse();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >&
      _internal_mapellipse() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >*
      _internal_mutable_mapellipse();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >&
      mapellipse() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >*
      mutable_mapellipse();

  // map<int32, .PBShape.Triangle> mapTriangle = 4;
  int maptriangle_size() const;
  private:
  int _internal_maptriangle_size() const;
  public:
  void clear_maptriangle();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >&
      _internal_maptriangle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >*
      _internal_mutable_maptriangle();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >&
      maptriangle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >*
      mutable_maptriangle();

  // map<int32, .PBShape.Scribble> mapScribble = 5;
  int mapscribble_size() const;
  private:
  int _internal_mapscribble_size() const;
  public:
  void clear_mapscribble();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >&
      _internal_mapscribble() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >*
      _internal_mutable_mapscribble();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >&
      mapscribble() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >*
      mutable_mapscribble();

  // @@protoc_insertion_point(class_scope:PBShape.Scene)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scene_MapLineEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mapline_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scene_MapRectangleEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > maprectangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scene_MapEllipseEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mapellipse_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scene_MapTriangleEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > maptriangle_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scene_MapScribbleEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mapscribble_;
  friend struct ::TableStruct_pbshape_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rect

// required int32 x = 1;
inline bool Rect::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rect::has_x() const {
  return _internal_has_x();
}
inline void Rect::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:PBShape.Rect.x)
  return _internal_x();
}
inline void Rect::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Rect::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PBShape.Rect.x)
}

// required int32 y = 2;
inline bool Rect::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rect::has_y() const {
  return _internal_has_y();
}
inline void Rect::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:PBShape.Rect.y)
  return _internal_y();
}
inline void Rect::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Rect::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PBShape.Rect.y)
}

// required int32 w = 3;
inline bool Rect::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rect::has_w() const {
  return _internal_has_w();
}
inline void Rect::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::w() const {
  // @@protoc_insertion_point(field_get:PBShape.Rect.w)
  return _internal_w();
}
inline void Rect::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void Rect::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:PBShape.Rect.w)
}

// required int32 h = 4;
inline bool Rect::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rect::has_h() const {
  return _internal_has_h();
}
inline void Rect::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::h() const {
  // @@protoc_insertion_point(field_get:PBShape.Rect.h)
  return _internal_h();
}
inline void Rect::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void Rect::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:PBShape.Rect.h)
}

// -------------------------------------------------------------------

// Pen

// optional int32 width = 1 [default = 1];
inline bool Pen::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pen::has_width() const {
  return _internal_has_width();
}
inline void Pen::clear_width() {
  width_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::width() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.width)
  return _internal_width();
}
inline void Pen::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  width_ = value;
}
inline void Pen::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.width)
}

// optional int32 r = 2 [default = 0];
inline bool Pen::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pen::has_r() const {
  return _internal_has_r();
}
inline void Pen::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::r() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.r)
  return _internal_r();
}
inline void Pen::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void Pen::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.r)
}

// optional int32 g = 3 [default = 0];
inline bool Pen::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pen::has_g() const {
  return _internal_has_g();
}
inline void Pen::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::g() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.g)
  return _internal_g();
}
inline void Pen::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void Pen::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.g)
}

// optional int32 b = 4 [default = 0];
inline bool Pen::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pen::has_b() const {
  return _internal_has_b();
}
inline void Pen::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::b() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.b)
  return _internal_b();
}
inline void Pen::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void Pen::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.b)
}

// optional int32 a = 5 [default = 0];
inline bool Pen::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pen::has_a() const {
  return _internal_has_a();
}
inline void Pen::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::a() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.a)
  return _internal_a();
}
inline void Pen::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void Pen::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.a)
}

// optional int32 style = 6 [default = 1];
inline bool Pen::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Pen::has_style() const {
  return _internal_has_style();
}
inline void Pen::clear_style() {
  style_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_style() const {
  return style_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::style() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.style)
  return _internal_style();
}
inline void Pen::_internal_set_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  style_ = value;
}
inline void Pen::set_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.style)
}

// optional int32 capstyle = 7 [default = 32];
inline bool Pen::_internal_has_capstyle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Pen::has_capstyle() const {
  return _internal_has_capstyle();
}
inline void Pen::clear_capstyle() {
  capstyle_ = 32;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_capstyle() const {
  return capstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::capstyle() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.capstyle)
  return _internal_capstyle();
}
inline void Pen::_internal_set_capstyle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  capstyle_ = value;
}
inline void Pen::set_capstyle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_capstyle(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.capstyle)
}

// optional int32 joinstyle = 8 [default = 128];
inline bool Pen::_internal_has_joinstyle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Pen::has_joinstyle() const {
  return _internal_has_joinstyle();
}
inline void Pen::clear_joinstyle() {
  joinstyle_ = 128;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::_internal_joinstyle() const {
  return joinstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pen::joinstyle() const {
  // @@protoc_insertion_point(field_get:PBShape.Pen.joinstyle)
  return _internal_joinstyle();
}
inline void Pen::_internal_set_joinstyle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  joinstyle_ = value;
}
inline void Pen::set_joinstyle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_joinstyle(value);
  // @@protoc_insertion_point(field_set:PBShape.Pen.joinstyle)
}

// -------------------------------------------------------------------

// Brush

// optional int32 r = 1 [default = 0];
inline bool Brush::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brush::has_r() const {
  return _internal_has_r();
}
inline void Brush::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::r() const {
  // @@protoc_insertion_point(field_get:PBShape.Brush.r)
  return _internal_r();
}
inline void Brush::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void Brush::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:PBShape.Brush.r)
}

// optional int32 g = 2 [default = 0];
inline bool Brush::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brush::has_g() const {
  return _internal_has_g();
}
inline void Brush::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::g() const {
  // @@protoc_insertion_point(field_get:PBShape.Brush.g)
  return _internal_g();
}
inline void Brush::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void Brush::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:PBShape.Brush.g)
}

// optional int32 b = 3 [default = 0];
inline bool Brush::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brush::has_b() const {
  return _internal_has_b();
}
inline void Brush::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::b() const {
  // @@protoc_insertion_point(field_get:PBShape.Brush.b)
  return _internal_b();
}
inline void Brush::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void Brush::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:PBShape.Brush.b)
}

// optional int32 a = 4 [default = 255];
inline bool Brush::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brush::has_a() const {
  return _internal_has_a();
}
inline void Brush::clear_a() {
  a_ = 255;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::a() const {
  // @@protoc_insertion_point(field_get:PBShape.Brush.a)
  return _internal_a();
}
inline void Brush::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void Brush::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:PBShape.Brush.a)
}

// optional int32 style = 5 [default = 1];
inline bool Brush::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brush::has_style() const {
  return _internal_has_style();
}
inline void Brush::clear_style() {
  style_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::_internal_style() const {
  return style_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brush::style() const {
  // @@protoc_insertion_point(field_get:PBShape.Brush.style)
  return _internal_style();
}
inline void Brush::_internal_set_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  style_ = value;
}
inline void Brush::set_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:PBShape.Brush.style)
}

// -------------------------------------------------------------------

// Pos

// required int32 x = 1;
inline bool Pos::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pos::has_x() const {
  return _internal_has_x();
}
inline void Pos::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pos::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pos::x() const {
  // @@protoc_insertion_point(field_get:PBShape.Pos.x)
  return _internal_x();
}
inline void Pos::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Pos::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PBShape.Pos.x)
}

// required int32 y = 2;
inline bool Pos::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pos::has_y() const {
  return _internal_has_y();
}
inline void Pos::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pos::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pos::y() const {
  // @@protoc_insertion_point(field_get:PBShape.Pos.y)
  return _internal_y();
}
inline void Pos::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Pos::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PBShape.Pos.y)
}

// -------------------------------------------------------------------

// Line

// required .PBShape.Pos p0 = 1;
inline bool Line::_internal_has_p0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || p0_ != nullptr);
  return value;
}
inline bool Line::has_p0() const {
  return _internal_has_p0();
}
inline void Line::clear_p0() {
  if (p0_ != nullptr) p0_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PBShape::Pos& Line::_internal_p0() const {
  const ::PBShape::Pos* p = p0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pos*>(
      &::PBShape::_Pos_default_instance_);
}
inline const ::PBShape::Pos& Line::p0() const {
  // @@protoc_insertion_point(field_get:PBShape.Line.p0)
  return _internal_p0();
}
inline ::PBShape::Pos* Line::release_p0() {
  // @@protoc_insertion_point(field_release:PBShape.Line.p0)
  _has_bits_[0] &= ~0x00000001u;
  ::PBShape::Pos* temp = p0_;
  p0_ = nullptr;
  return temp;
}
inline ::PBShape::Pos* Line::_internal_mutable_p0() {
  _has_bits_[0] |= 0x00000001u;
  if (p0_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pos>(GetArenaNoVirtual());
    p0_ = p;
  }
  return p0_;
}
inline ::PBShape::Pos* Line::mutable_p0() {
  // @@protoc_insertion_point(field_mutable:PBShape.Line.p0)
  return _internal_mutable_p0();
}
inline void Line::set_allocated_p0(::PBShape::Pos* p0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p0_;
  }
  if (p0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  p0_ = p0;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Line.p0)
}

// required .PBShape.Pos p1 = 2;
inline bool Line::_internal_has_p1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || p1_ != nullptr);
  return value;
}
inline bool Line::has_p1() const {
  return _internal_has_p1();
}
inline void Line::clear_p1() {
  if (p1_ != nullptr) p1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PBShape::Pos& Line::_internal_p1() const {
  const ::PBShape::Pos* p = p1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pos*>(
      &::PBShape::_Pos_default_instance_);
}
inline const ::PBShape::Pos& Line::p1() const {
  // @@protoc_insertion_point(field_get:PBShape.Line.p1)
  return _internal_p1();
}
inline ::PBShape::Pos* Line::release_p1() {
  // @@protoc_insertion_point(field_release:PBShape.Line.p1)
  _has_bits_[0] &= ~0x00000002u;
  ::PBShape::Pos* temp = p1_;
  p1_ = nullptr;
  return temp;
}
inline ::PBShape::Pos* Line::_internal_mutable_p1() {
  _has_bits_[0] |= 0x00000002u;
  if (p1_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pos>(GetArenaNoVirtual());
    p1_ = p;
  }
  return p1_;
}
inline ::PBShape::Pos* Line::mutable_p1() {
  // @@protoc_insertion_point(field_mutable:PBShape.Line.p1)
  return _internal_mutable_p1();
}
inline void Line::set_allocated_p1(::PBShape::Pos* p1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p1_;
  }
  if (p1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Line.p1)
}

// required .PBShape.Pen pen = 3;
inline bool Line::_internal_has_pen() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pen_ != nullptr);
  return value;
}
inline bool Line::has_pen() const {
  return _internal_has_pen();
}
inline void Line::clear_pen() {
  if (pen_ != nullptr) pen_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PBShape::Pen& Line::_internal_pen() const {
  const ::PBShape::Pen* p = pen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pen*>(
      &::PBShape::_Pen_default_instance_);
}
inline const ::PBShape::Pen& Line::pen() const {
  // @@protoc_insertion_point(field_get:PBShape.Line.pen)
  return _internal_pen();
}
inline ::PBShape::Pen* Line::release_pen() {
  // @@protoc_insertion_point(field_release:PBShape.Line.pen)
  _has_bits_[0] &= ~0x00000004u;
  ::PBShape::Pen* temp = pen_;
  pen_ = nullptr;
  return temp;
}
inline ::PBShape::Pen* Line::_internal_mutable_pen() {
  _has_bits_[0] |= 0x00000004u;
  if (pen_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pen>(GetArenaNoVirtual());
    pen_ = p;
  }
  return pen_;
}
inline ::PBShape::Pen* Line::mutable_pen() {
  // @@protoc_insertion_point(field_mutable:PBShape.Line.pen)
  return _internal_mutable_pen();
}
inline void Line::set_allocated_pen(::PBShape::Pen* pen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pen_;
  }
  if (pen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pen_ = pen;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Line.pen)
}

// optional float angle = 4 [default = 0];
inline bool Line::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Line::has_angle() const {
  return _internal_has_angle();
}
inline void Line::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Line::_internal_angle() const {
  return angle_;
}
inline float Line::angle() const {
  // @@protoc_insertion_point(field_get:PBShape.Line.angle)
  return _internal_angle();
}
inline void Line::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000008u;
  angle_ = value;
}
inline void Line::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PBShape.Line.angle)
}

// -------------------------------------------------------------------

// Rectangle

// required .PBShape.Pos pos = 1;
inline bool Rectangle::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool Rectangle::has_pos() const {
  return _internal_has_pos();
}
inline void Rectangle::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PBShape::Pos& Rectangle::_internal_pos() const {
  const ::PBShape::Pos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pos*>(
      &::PBShape::_Pos_default_instance_);
}
inline const ::PBShape::Pos& Rectangle::pos() const {
  // @@protoc_insertion_point(field_get:PBShape.Rectangle.pos)
  return _internal_pos();
}
inline ::PBShape::Pos* Rectangle::release_pos() {
  // @@protoc_insertion_point(field_release:PBShape.Rectangle.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::PBShape::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PBShape::Pos* Rectangle::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::PBShape::Pos* Rectangle::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PBShape.Rectangle.pos)
  return _internal_mutable_pos();
}
inline void Rectangle::set_allocated_pos(::PBShape::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Rectangle.pos)
}

// required int32 width = 2;
inline bool Rectangle::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rectangle::has_width() const {
  return _internal_has_width();
}
inline void Rectangle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::width() const {
  // @@protoc_insertion_point(field_get:PBShape.Rectangle.width)
  return _internal_width();
}
inline void Rectangle::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Rectangle::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PBShape.Rectangle.width)
}

// required int32 height = 3;
inline bool Rectangle::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Rectangle::has_height() const {
  return _internal_has_height();
}
inline void Rectangle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::height() const {
  // @@protoc_insertion_point(field_get:PBShape.Rectangle.height)
  return _internal_height();
}
inline void Rectangle::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void Rectangle::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PBShape.Rectangle.height)
}

// optional .PBShape.Pen pen = 4;
inline bool Rectangle::_internal_has_pen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pen_ != nullptr);
  return value;
}
inline bool Rectangle::has_pen() const {
  return _internal_has_pen();
}
inline void Rectangle::clear_pen() {
  if (pen_ != nullptr) pen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PBShape::Pen& Rectangle::_internal_pen() const {
  const ::PBShape::Pen* p = pen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pen*>(
      &::PBShape::_Pen_default_instance_);
}
inline const ::PBShape::Pen& Rectangle::pen() const {
  // @@protoc_insertion_point(field_get:PBShape.Rectangle.pen)
  return _internal_pen();
}
inline ::PBShape::Pen* Rectangle::release_pen() {
  // @@protoc_insertion_point(field_release:PBShape.Rectangle.pen)
  _has_bits_[0] &= ~0x00000002u;
  ::PBShape::Pen* temp = pen_;
  pen_ = nullptr;
  return temp;
}
inline ::PBShape::Pen* Rectangle::_internal_mutable_pen() {
  _has_bits_[0] |= 0x00000002u;
  if (pen_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pen>(GetArenaNoVirtual());
    pen_ = p;
  }
  return pen_;
}
inline ::PBShape::Pen* Rectangle::mutable_pen() {
  // @@protoc_insertion_point(field_mutable:PBShape.Rectangle.pen)
  return _internal_mutable_pen();
}
inline void Rectangle::set_allocated_pen(::PBShape::Pen* pen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pen_;
  }
  if (pen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pen_ = pen;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Rectangle.pen)
}

// optional .PBShape.Brush brush = 5;
inline bool Rectangle::_internal_has_brush() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || brush_ != nullptr);
  return value;
}
inline bool Rectangle::has_brush() const {
  return _internal_has_brush();
}
inline void Rectangle::clear_brush() {
  if (brush_ != nullptr) brush_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PBShape::Brush& Rectangle::_internal_brush() const {
  const ::PBShape::Brush* p = brush_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Brush*>(
      &::PBShape::_Brush_default_instance_);
}
inline const ::PBShape::Brush& Rectangle::brush() const {
  // @@protoc_insertion_point(field_get:PBShape.Rectangle.brush)
  return _internal_brush();
}
inline ::PBShape::Brush* Rectangle::release_brush() {
  // @@protoc_insertion_point(field_release:PBShape.Rectangle.brush)
  _has_bits_[0] &= ~0x00000004u;
  ::PBShape::Brush* temp = brush_;
  brush_ = nullptr;
  return temp;
}
inline ::PBShape::Brush* Rectangle::_internal_mutable_brush() {
  _has_bits_[0] |= 0x00000004u;
  if (brush_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Brush>(GetArenaNoVirtual());
    brush_ = p;
  }
  return brush_;
}
inline ::PBShape::Brush* Rectangle::mutable_brush() {
  // @@protoc_insertion_point(field_mutable:PBShape.Rectangle.brush)
  return _internal_mutable_brush();
}
inline void Rectangle::set_allocated_brush(::PBShape::Brush* brush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brush_;
  }
  if (brush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brush, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brush_ = brush;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Rectangle.brush)
}

// optional float angle = 6 [default = 0];
inline bool Rectangle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Rectangle::has_angle() const {
  return _internal_has_angle();
}
inline void Rectangle::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Rectangle::_internal_angle() const {
  return angle_;
}
inline float Rectangle::angle() const {
  // @@protoc_insertion_point(field_get:PBShape.Rectangle.angle)
  return _internal_angle();
}
inline void Rectangle::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000020u;
  angle_ = value;
}
inline void Rectangle::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PBShape.Rectangle.angle)
}

// -------------------------------------------------------------------

// Ellipse

// required .PBShape.Pos pos = 1;
inline bool Ellipse::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool Ellipse::has_pos() const {
  return _internal_has_pos();
}
inline void Ellipse::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PBShape::Pos& Ellipse::_internal_pos() const {
  const ::PBShape::Pos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pos*>(
      &::PBShape::_Pos_default_instance_);
}
inline const ::PBShape::Pos& Ellipse::pos() const {
  // @@protoc_insertion_point(field_get:PBShape.Ellipse.pos)
  return _internal_pos();
}
inline ::PBShape::Pos* Ellipse::release_pos() {
  // @@protoc_insertion_point(field_release:PBShape.Ellipse.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::PBShape::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PBShape::Pos* Ellipse::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::PBShape::Pos* Ellipse::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PBShape.Ellipse.pos)
  return _internal_mutable_pos();
}
inline void Ellipse::set_allocated_pos(::PBShape::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Ellipse.pos)
}

// required int32 width = 2;
inline bool Ellipse::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ellipse::has_width() const {
  return _internal_has_width();
}
inline void Ellipse::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ellipse::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ellipse::width() const {
  // @@protoc_insertion_point(field_get:PBShape.Ellipse.width)
  return _internal_width();
}
inline void Ellipse::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Ellipse::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PBShape.Ellipse.width)
}

// required int32 height = 3;
inline bool Ellipse::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ellipse::has_height() const {
  return _internal_has_height();
}
inline void Ellipse::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ellipse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ellipse::height() const {
  // @@protoc_insertion_point(field_get:PBShape.Ellipse.height)
  return _internal_height();
}
inline void Ellipse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void Ellipse::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PBShape.Ellipse.height)
}

// optional .PBShape.Pen pen = 4;
inline bool Ellipse::_internal_has_pen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pen_ != nullptr);
  return value;
}
inline bool Ellipse::has_pen() const {
  return _internal_has_pen();
}
inline void Ellipse::clear_pen() {
  if (pen_ != nullptr) pen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PBShape::Pen& Ellipse::_internal_pen() const {
  const ::PBShape::Pen* p = pen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pen*>(
      &::PBShape::_Pen_default_instance_);
}
inline const ::PBShape::Pen& Ellipse::pen() const {
  // @@protoc_insertion_point(field_get:PBShape.Ellipse.pen)
  return _internal_pen();
}
inline ::PBShape::Pen* Ellipse::release_pen() {
  // @@protoc_insertion_point(field_release:PBShape.Ellipse.pen)
  _has_bits_[0] &= ~0x00000002u;
  ::PBShape::Pen* temp = pen_;
  pen_ = nullptr;
  return temp;
}
inline ::PBShape::Pen* Ellipse::_internal_mutable_pen() {
  _has_bits_[0] |= 0x00000002u;
  if (pen_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pen>(GetArenaNoVirtual());
    pen_ = p;
  }
  return pen_;
}
inline ::PBShape::Pen* Ellipse::mutable_pen() {
  // @@protoc_insertion_point(field_mutable:PBShape.Ellipse.pen)
  return _internal_mutable_pen();
}
inline void Ellipse::set_allocated_pen(::PBShape::Pen* pen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pen_;
  }
  if (pen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pen_ = pen;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Ellipse.pen)
}

// optional .PBShape.Brush brush = 5;
inline bool Ellipse::_internal_has_brush() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || brush_ != nullptr);
  return value;
}
inline bool Ellipse::has_brush() const {
  return _internal_has_brush();
}
inline void Ellipse::clear_brush() {
  if (brush_ != nullptr) brush_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PBShape::Brush& Ellipse::_internal_brush() const {
  const ::PBShape::Brush* p = brush_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Brush*>(
      &::PBShape::_Brush_default_instance_);
}
inline const ::PBShape::Brush& Ellipse::brush() const {
  // @@protoc_insertion_point(field_get:PBShape.Ellipse.brush)
  return _internal_brush();
}
inline ::PBShape::Brush* Ellipse::release_brush() {
  // @@protoc_insertion_point(field_release:PBShape.Ellipse.brush)
  _has_bits_[0] &= ~0x00000004u;
  ::PBShape::Brush* temp = brush_;
  brush_ = nullptr;
  return temp;
}
inline ::PBShape::Brush* Ellipse::_internal_mutable_brush() {
  _has_bits_[0] |= 0x00000004u;
  if (brush_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Brush>(GetArenaNoVirtual());
    brush_ = p;
  }
  return brush_;
}
inline ::PBShape::Brush* Ellipse::mutable_brush() {
  // @@protoc_insertion_point(field_mutable:PBShape.Ellipse.brush)
  return _internal_mutable_brush();
}
inline void Ellipse::set_allocated_brush(::PBShape::Brush* brush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brush_;
  }
  if (brush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brush, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brush_ = brush;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Ellipse.brush)
}

// optional float angle = 6 [default = 0];
inline bool Ellipse::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Ellipse::has_angle() const {
  return _internal_has_angle();
}
inline void Ellipse::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Ellipse::_internal_angle() const {
  return angle_;
}
inline float Ellipse::angle() const {
  // @@protoc_insertion_point(field_get:PBShape.Ellipse.angle)
  return _internal_angle();
}
inline void Ellipse::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000020u;
  angle_ = value;
}
inline void Ellipse::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PBShape.Ellipse.angle)
}

// -------------------------------------------------------------------

// Triangle

// required .PBShape.Pos pos = 1;
inline bool Triangle::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool Triangle::has_pos() const {
  return _internal_has_pos();
}
inline void Triangle::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PBShape::Pos& Triangle::_internal_pos() const {
  const ::PBShape::Pos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pos*>(
      &::PBShape::_Pos_default_instance_);
}
inline const ::PBShape::Pos& Triangle::pos() const {
  // @@protoc_insertion_point(field_get:PBShape.Triangle.pos)
  return _internal_pos();
}
inline ::PBShape::Pos* Triangle::release_pos() {
  // @@protoc_insertion_point(field_release:PBShape.Triangle.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::PBShape::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PBShape::Pos* Triangle::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::PBShape::Pos* Triangle::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PBShape.Triangle.pos)
  return _internal_mutable_pos();
}
inline void Triangle::set_allocated_pos(::PBShape::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Triangle.pos)
}

// required int32 width = 2;
inline bool Triangle::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Triangle::has_width() const {
  return _internal_has_width();
}
inline void Triangle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::width() const {
  // @@protoc_insertion_point(field_get:PBShape.Triangle.width)
  return _internal_width();
}
inline void Triangle::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Triangle::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PBShape.Triangle.width)
}

// required int32 height = 3;
inline bool Triangle::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Triangle::has_height() const {
  return _internal_has_height();
}
inline void Triangle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Triangle::height() const {
  // @@protoc_insertion_point(field_get:PBShape.Triangle.height)
  return _internal_height();
}
inline void Triangle::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void Triangle::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PBShape.Triangle.height)
}

// optional .PBShape.Pen pen = 4;
inline bool Triangle::_internal_has_pen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pen_ != nullptr);
  return value;
}
inline bool Triangle::has_pen() const {
  return _internal_has_pen();
}
inline void Triangle::clear_pen() {
  if (pen_ != nullptr) pen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PBShape::Pen& Triangle::_internal_pen() const {
  const ::PBShape::Pen* p = pen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pen*>(
      &::PBShape::_Pen_default_instance_);
}
inline const ::PBShape::Pen& Triangle::pen() const {
  // @@protoc_insertion_point(field_get:PBShape.Triangle.pen)
  return _internal_pen();
}
inline ::PBShape::Pen* Triangle::release_pen() {
  // @@protoc_insertion_point(field_release:PBShape.Triangle.pen)
  _has_bits_[0] &= ~0x00000002u;
  ::PBShape::Pen* temp = pen_;
  pen_ = nullptr;
  return temp;
}
inline ::PBShape::Pen* Triangle::_internal_mutable_pen() {
  _has_bits_[0] |= 0x00000002u;
  if (pen_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pen>(GetArenaNoVirtual());
    pen_ = p;
  }
  return pen_;
}
inline ::PBShape::Pen* Triangle::mutable_pen() {
  // @@protoc_insertion_point(field_mutable:PBShape.Triangle.pen)
  return _internal_mutable_pen();
}
inline void Triangle::set_allocated_pen(::PBShape::Pen* pen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pen_;
  }
  if (pen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pen_ = pen;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Triangle.pen)
}

// optional .PBShape.Brush brush = 5;
inline bool Triangle::_internal_has_brush() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || brush_ != nullptr);
  return value;
}
inline bool Triangle::has_brush() const {
  return _internal_has_brush();
}
inline void Triangle::clear_brush() {
  if (brush_ != nullptr) brush_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PBShape::Brush& Triangle::_internal_brush() const {
  const ::PBShape::Brush* p = brush_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Brush*>(
      &::PBShape::_Brush_default_instance_);
}
inline const ::PBShape::Brush& Triangle::brush() const {
  // @@protoc_insertion_point(field_get:PBShape.Triangle.brush)
  return _internal_brush();
}
inline ::PBShape::Brush* Triangle::release_brush() {
  // @@protoc_insertion_point(field_release:PBShape.Triangle.brush)
  _has_bits_[0] &= ~0x00000004u;
  ::PBShape::Brush* temp = brush_;
  brush_ = nullptr;
  return temp;
}
inline ::PBShape::Brush* Triangle::_internal_mutable_brush() {
  _has_bits_[0] |= 0x00000004u;
  if (brush_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Brush>(GetArenaNoVirtual());
    brush_ = p;
  }
  return brush_;
}
inline ::PBShape::Brush* Triangle::mutable_brush() {
  // @@protoc_insertion_point(field_mutable:PBShape.Triangle.brush)
  return _internal_mutable_brush();
}
inline void Triangle::set_allocated_brush(::PBShape::Brush* brush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brush_;
  }
  if (brush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brush, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brush_ = brush;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Triangle.brush)
}

// optional float angle = 6 [default = 0];
inline bool Triangle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Triangle::has_angle() const {
  return _internal_has_angle();
}
inline void Triangle::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Triangle::_internal_angle() const {
  return angle_;
}
inline float Triangle::angle() const {
  // @@protoc_insertion_point(field_get:PBShape.Triangle.angle)
  return _internal_angle();
}
inline void Triangle::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000020u;
  angle_ = value;
}
inline void Triangle::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PBShape.Triangle.angle)
}

// -------------------------------------------------------------------

// Eraser

// required bytes path = 1;
inline bool Eraser::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Eraser::has_path() const {
  return _internal_has_path();
}
inline void Eraser::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Eraser::path() const {
  // @@protoc_insertion_point(field_get:PBShape.Eraser.path)
  return _internal_path();
}
inline void Eraser::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:PBShape.Eraser.path)
}
inline std::string* Eraser::mutable_path() {
  // @@protoc_insertion_point(field_mutable:PBShape.Eraser.path)
  return _internal_mutable_path();
}
inline const std::string& Eraser::_internal_path() const {
  return path_.GetNoArena();
}
inline void Eraser::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Eraser::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBShape.Eraser.path)
}
inline void Eraser::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBShape.Eraser.path)
}
inline void Eraser::set_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBShape.Eraser.path)
}
inline std::string* Eraser::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Eraser::release_path() {
  // @@protoc_insertion_point(field_release:PBShape.Eraser.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Eraser::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:PBShape.Eraser.path)
}

// required int32 width = 2;
inline bool Eraser::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Eraser::has_width() const {
  return _internal_has_width();
}
inline void Eraser::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Eraser::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Eraser::width() const {
  // @@protoc_insertion_point(field_get:PBShape.Eraser.width)
  return _internal_width();
}
inline void Eraser::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void Eraser::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PBShape.Eraser.width)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Scribble

// required .PBShape.Rect rect = 1;
inline bool Scribble::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool Scribble::has_rect() const {
  return _internal_has_rect();
}
inline void Scribble::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PBShape::Rect& Scribble::_internal_rect() const {
  const ::PBShape::Rect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Rect*>(
      &::PBShape::_Rect_default_instance_);
}
inline const ::PBShape::Rect& Scribble::rect() const {
  // @@protoc_insertion_point(field_get:PBShape.Scribble.rect)
  return _internal_rect();
}
inline ::PBShape::Rect* Scribble::release_rect() {
  // @@protoc_insertion_point(field_release:PBShape.Scribble.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::PBShape::Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::PBShape::Rect* Scribble::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Rect>(GetArenaNoVirtual());
    rect_ = p;
  }
  return rect_;
}
inline ::PBShape::Rect* Scribble::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:PBShape.Scribble.rect)
  return _internal_mutable_rect();
}
inline void Scribble::set_allocated_rect(::PBShape::Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Scribble.rect)
}

// required .PBShape.Pos pos = 2;
inline bool Scribble::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool Scribble::has_pos() const {
  return _internal_has_pos();
}
inline void Scribble::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PBShape::Pos& Scribble::_internal_pos() const {
  const ::PBShape::Pos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pos*>(
      &::PBShape::_Pos_default_instance_);
}
inline const ::PBShape::Pos& Scribble::pos() const {
  // @@protoc_insertion_point(field_get:PBShape.Scribble.pos)
  return _internal_pos();
}
inline ::PBShape::Pos* Scribble::release_pos() {
  // @@protoc_insertion_point(field_release:PBShape.Scribble.pos)
  _has_bits_[0] &= ~0x00000004u;
  ::PBShape::Pos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PBShape::Pos* Scribble::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000004u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::PBShape::Pos* Scribble::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:PBShape.Scribble.pos)
  return _internal_mutable_pos();
}
inline void Scribble::set_allocated_pos(::PBShape::Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Scribble.pos)
}

// required bytes path = 3;
inline bool Scribble::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scribble::has_path() const {
  return _internal_has_path();
}
inline void Scribble::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Scribble::path() const {
  // @@protoc_insertion_point(field_get:PBShape.Scribble.path)
  return _internal_path();
}
inline void Scribble::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:PBShape.Scribble.path)
}
inline std::string* Scribble::mutable_path() {
  // @@protoc_insertion_point(field_mutable:PBShape.Scribble.path)
  return _internal_mutable_path();
}
inline const std::string& Scribble::_internal_path() const {
  return path_.GetNoArena();
}
inline void Scribble::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Scribble::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBShape.Scribble.path)
}
inline void Scribble::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBShape.Scribble.path)
}
inline void Scribble::set_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBShape.Scribble.path)
}
inline std::string* Scribble::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Scribble::release_path() {
  // @@protoc_insertion_point(field_release:PBShape.Scribble.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Scribble::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:PBShape.Scribble.path)
}

// required .PBShape.Pen pen = 4;
inline bool Scribble::_internal_has_pen() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || pen_ != nullptr);
  return value;
}
inline bool Scribble::has_pen() const {
  return _internal_has_pen();
}
inline void Scribble::clear_pen() {
  if (pen_ != nullptr) pen_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::PBShape::Pen& Scribble::_internal_pen() const {
  const ::PBShape::Pen* p = pen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PBShape::Pen*>(
      &::PBShape::_Pen_default_instance_);
}
inline const ::PBShape::Pen& Scribble::pen() const {
  // @@protoc_insertion_point(field_get:PBShape.Scribble.pen)
  return _internal_pen();
}
inline ::PBShape::Pen* Scribble::release_pen() {
  // @@protoc_insertion_point(field_release:PBShape.Scribble.pen)
  _has_bits_[0] &= ~0x00000008u;
  ::PBShape::Pen* temp = pen_;
  pen_ = nullptr;
  return temp;
}
inline ::PBShape::Pen* Scribble::_internal_mutable_pen() {
  _has_bits_[0] |= 0x00000008u;
  if (pen_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBShape::Pen>(GetArenaNoVirtual());
    pen_ = p;
  }
  return pen_;
}
inline ::PBShape::Pen* Scribble::mutable_pen() {
  // @@protoc_insertion_point(field_mutable:PBShape.Scribble.pen)
  return _internal_mutable_pen();
}
inline void Scribble::set_allocated_pen(::PBShape::Pen* pen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pen_;
  }
  if (pen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pen_ = pen;
  // @@protoc_insertion_point(field_set_allocated:PBShape.Scribble.pen)
}

// map<int32, .PBShape.Eraser> maperaser = 5;
inline int Scribble::_internal_maperaser_size() const {
  return maperaser_.size();
}
inline int Scribble::maperaser_size() const {
  return _internal_maperaser_size();
}
inline void Scribble::clear_maperaser() {
  maperaser_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >&
Scribble::_internal_maperaser() const {
  return maperaser_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >&
Scribble::maperaser() const {
  // @@protoc_insertion_point(field_map:PBShape.Scribble.maperaser)
  return _internal_maperaser();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >*
Scribble::_internal_mutable_maperaser() {
  return maperaser_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Eraser >*
Scribble::mutable_maperaser() {
  // @@protoc_insertion_point(field_mutable_map:PBShape.Scribble.maperaser)
  return _internal_mutable_maperaser();
}

// optional float angle = 6 [default = 0];
inline bool Scribble::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Scribble::has_angle() const {
  return _internal_has_angle();
}
inline void Scribble::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Scribble::_internal_angle() const {
  return angle_;
}
inline float Scribble::angle() const {
  // @@protoc_insertion_point(field_get:PBShape.Scribble.angle)
  return _internal_angle();
}
inline void Scribble::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000010u;
  angle_ = value;
}
inline void Scribble::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:PBShape.Scribble.angle)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Scene

// map<int32, .PBShape.Line> mapLine = 1;
inline int Scene::_internal_mapline_size() const {
  return mapline_.size();
}
inline int Scene::mapline_size() const {
  return _internal_mapline_size();
}
inline void Scene::clear_mapline() {
  mapline_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >&
Scene::_internal_mapline() const {
  return mapline_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >&
Scene::mapline() const {
  // @@protoc_insertion_point(field_map:PBShape.Scene.mapLine)
  return _internal_mapline();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >*
Scene::_internal_mutable_mapline() {
  return mapline_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Line >*
Scene::mutable_mapline() {
  // @@protoc_insertion_point(field_mutable_map:PBShape.Scene.mapLine)
  return _internal_mutable_mapline();
}

// map<int32, .PBShape.Rectangle> mapRectangle = 2;
inline int Scene::_internal_maprectangle_size() const {
  return maprectangle_.size();
}
inline int Scene::maprectangle_size() const {
  return _internal_maprectangle_size();
}
inline void Scene::clear_maprectangle() {
  maprectangle_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >&
Scene::_internal_maprectangle() const {
  return maprectangle_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >&
Scene::maprectangle() const {
  // @@protoc_insertion_point(field_map:PBShape.Scene.mapRectangle)
  return _internal_maprectangle();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >*
Scene::_internal_mutable_maprectangle() {
  return maprectangle_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Rectangle >*
Scene::mutable_maprectangle() {
  // @@protoc_insertion_point(field_mutable_map:PBShape.Scene.mapRectangle)
  return _internal_mutable_maprectangle();
}

// map<int32, .PBShape.Ellipse> mapEllipse = 3;
inline int Scene::_internal_mapellipse_size() const {
  return mapellipse_.size();
}
inline int Scene::mapellipse_size() const {
  return _internal_mapellipse_size();
}
inline void Scene::clear_mapellipse() {
  mapellipse_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >&
Scene::_internal_mapellipse() const {
  return mapellipse_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >&
Scene::mapellipse() const {
  // @@protoc_insertion_point(field_map:PBShape.Scene.mapEllipse)
  return _internal_mapellipse();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >*
Scene::_internal_mutable_mapellipse() {
  return mapellipse_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Ellipse >*
Scene::mutable_mapellipse() {
  // @@protoc_insertion_point(field_mutable_map:PBShape.Scene.mapEllipse)
  return _internal_mutable_mapellipse();
}

// map<int32, .PBShape.Triangle> mapTriangle = 4;
inline int Scene::_internal_maptriangle_size() const {
  return maptriangle_.size();
}
inline int Scene::maptriangle_size() const {
  return _internal_maptriangle_size();
}
inline void Scene::clear_maptriangle() {
  maptriangle_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >&
Scene::_internal_maptriangle() const {
  return maptriangle_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >&
Scene::maptriangle() const {
  // @@protoc_insertion_point(field_map:PBShape.Scene.mapTriangle)
  return _internal_maptriangle();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >*
Scene::_internal_mutable_maptriangle() {
  return maptriangle_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Triangle >*
Scene::mutable_maptriangle() {
  // @@protoc_insertion_point(field_mutable_map:PBShape.Scene.mapTriangle)
  return _internal_mutable_maptriangle();
}

// map<int32, .PBShape.Scribble> mapScribble = 5;
inline int Scene::_internal_mapscribble_size() const {
  return mapscribble_.size();
}
inline int Scene::mapscribble_size() const {
  return _internal_mapscribble_size();
}
inline void Scene::clear_mapscribble() {
  mapscribble_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >&
Scene::_internal_mapscribble() const {
  return mapscribble_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >&
Scene::mapscribble() const {
  // @@protoc_insertion_point(field_map:PBShape.Scene.mapScribble)
  return _internal_mapscribble();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >*
Scene::_internal_mutable_mapscribble() {
  return mapscribble_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PBShape::Scribble >*
Scene::mutable_mapscribble() {
  // @@protoc_insertion_point(field_mutable_map:PBShape.Scene.mapScribble)
  return _internal_mutable_mapscribble();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBShape

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pbshape_2eproto
